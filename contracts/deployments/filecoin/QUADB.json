{
  "address": "0x480B9364C0f8Cb53872a70e7e5CfF372FBc1090a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_publicResolver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_baseNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_gateImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_subscriptionImplementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InstanceAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCodeOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInstanceAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubNodeAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_RESOLVER",
      "outputs": [
        {
          "internalType": "contract IFNSResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUADB_NODE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRAR",
      "outputs": [
        {
          "internalType": "contract IFNSRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRY",
      "outputs": [
        {
          "internalType": "contract IFNS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TABLELAND",
      "outputs": [
        {
          "internalType": "contract ITablelandTables",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "codeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createDBSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_DBSpace",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createDBSubSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_about",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_codeIPNS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_IPNSEncryptedKey",
          "type": "string"
        }
      ],
      "name": "createInstanceCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadataCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_IPNS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_IPNSEncryptedKey",
          "type": "string"
        }
      ],
      "name": "createSpaceInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        }
      ],
      "name": "extendInstanceSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gatedContract",
          "type": "address"
        }
      ],
      "name": "getAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "getDeterministicAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getRemainingSubscriptionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "getSuscriptionDeterministicAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_subscriber",
          "type": "address"
        }
      ],
      "name": "hasActiveSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "hasMutateAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "access",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "hasViewAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "insertNewMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "instanceSubscription",
      "outputs": [
        {
          "internalType": "contract IGated",
          "name": "subscriptionContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "instances",
      "outputs": [
        {
          "internalType": "address",
          "name": "gatedContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isType",
      "outputs": [
        {
          "internalType": "enum Core.Types",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        }
      ],
      "name": "purchaseInstanceSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "removeMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "safeTransferDomainOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "baseNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "setQUADBNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "subNodes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tableIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferDomainOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_codeID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_about",
          "type": "string"
        }
      ],
      "name": "updateCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_metadataCID",
          "type": "string"
        }
      ],
      "name": "updateInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "updateInstanceThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
  "receipt": {
    "to": null,
    "from": "0x0D1781F0b693b35939A49831A6C799B938Bd2F80",
    "contractAddress": "0x480B9364C0f8Cb53872a70e7e5CfF372FBc1090a",
    "transactionIndex": 26,
    "gasUsed": "248776505",
    "logsBloom": "0x
    "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915",
    "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 4949781,
        "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
        "address": "0x480B9364C0f8Cb53872a70e7e5CfF372FBc1090a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000d1781f0b693b35939a49831a6c799b938bd2f80"
        ],
        "data": "0x",
        "logIndex": 149,
        "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 4949781,
        "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
        "address": "0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000480b9364c0f8cb53872a70e7e5cff372fbc1090a",
          "0x0000000000000000000000000000000000000000000000000000000000000046"
        ],
        "data": "0x",
        "logIndex": 150,
        "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 4949781,
        "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
        "address": "0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000480b9364c0f8cb53872a70e7e5cff372fbc1090a000000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000054435245415445205441424c452064625f7370616365735f3331342844425370616365494420746578742c20444253756253706163654f66494420746578742c20444253756253706163654e616d65207465787429000000000000000000000000",
        "logIndex": 151,
        "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 4949781,
        "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
        "address": "0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000480b9364c0f8cb53872a70e7e5cff372fbc1090a",
          "0x0000000000000000000000000000000000000000000000000000000000000047"
        ],
        "data": "0x",
        "logIndex": 152,
        "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 4949781,
        "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
        "address": "0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000480b9364c0f8cb53872a70e7e5cff372fbc1090a0000000000000000000000000000000000000000000000000000000000000047000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000d0435245415445205441424c452064625f7370616365735f696e7374616e6365735f33313428496e7374616e6365494420746578742c20696e7374616e63654f66537061636520746578742c20696e7374616e63655479706520746578742c206d6574616461746143494420746578742c2049504e5320746578742c2049504e53456e637279707465644b657920746578742c206761746564436f6e747261637420746578742c20707269636520746578742c2063726561746f7220746578742c207468726573686f6c6420746578742900000000000000000000000000000000",
        "logIndex": 153,
        "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 4949781,
        "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
        "address": "0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000480b9364c0f8cb53872a70e7e5cff372fbc1090a",
          "0x0000000000000000000000000000000000000000000000000000000000000048"
        ],
        "data": "0x",
        "logIndex": 154,
        "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 4949781,
        "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
        "address": "0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000480b9364c0f8cb53872a70e7e5cff372fbc1090a000000000000000000000000000000000000000000000000000000000000004800000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000085435245415445205441424c4520696e7374616e6365735f636f6465735f33313428496e7374616e6365494420746578742c20636f6465494420746578742c206e616d6520746578742c2061626f757420746578742c2049504e5320746578742c2049504e53456e637279707465644b657920746578742c2063726561746f72207465787429000000000000000000000000000000000000000000000000000000",
        "logIndex": 155,
        "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 4949781,
        "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
        "address": "0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000480b9364c0f8cb53872a70e7e5cff372fbc1090a",
          "0x0000000000000000000000000000000000000000000000000000000000000049"
        ],
        "data": "0x",
        "logIndex": 156,
        "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 4949781,
        "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
        "address": "0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000480b9364c0f8cb53872a70e7e5cff372fbc1090a00000000000000000000000000000000000000000000000000000000000000490000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004d435245415445205441424c4520737562736372697074696f6e735f33313428496e7374616e6365494420746578742c207375627363726962657220746578742c20656e6473417420746578742900000000000000000000000000000000000000",
        "logIndex": 157,
        "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 4949781,
        "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
        "address": "0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000480b9364c0f8cb53872a70e7e5cff372fbc1090a",
          "0x000000000000000000000000000000000000000000000000000000000000004a"
        ],
        "data": "0x",
        "logIndex": 158,
        "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 4949781,
        "transactionHash": "0xd354868fbe233e289e5ace317e7c29f1d629f386f6d5294ad38f4e56f1ba61b8",
        "address": "0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000480b9364c0f8cb53872a70e7e5cff372fbc1090a000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000036435245415445205441424c45206d656d626572735f33313428496e7374616e6365494420746578742c206d656d62657220746578742900000000000000000000",
        "logIndex": 159,
        "blockHash": "0xc2b4543e894aa5936dd2f170ef52dc762aae6dddaed8b32e3baf716cba70b915"
      }
    ],
    "blockNumber": 4949781,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x916915d0d41EaA8AAEd70b2A5Fb006FFc213961b",
    "0x45d9d6408d5159a379924cf423cb7e15C00fA81f",
    "0xed9bd04b1BB87Abe2EfF583A977514940c95699c",
    "0x78f6b1389af563cc5c91f234ea46b055e49658d8b999eeb9e0baef7dbbc93fdb",
    "0xC26343744c74cf342b18Ee6a2bA0D3D8bf780ca1",
    "0xC38db51d09E0C01B7d9d039F072d1393fba97476"
  ],
  "numDeployments": 2,
  "solcInputHash": "16702a04043f9186fa54337d24f5da3c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_publicResolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_baseNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_gateImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subscriptionImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InstanceAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCodeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInstanceAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubNodeAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_RESOLVER\",\"outputs\":[{\"internalType\":\"contract IFNSResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUADB_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRAR\",\"outputs\":[{\"internalType\":\"contract IFNSRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY\",\"outputs\":[{\"internalType\":\"contract IFNS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TABLELAND\",\"outputs\":[{\"internalType\":\"contract ITablelandTables\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"codeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createDBSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_DBSpace\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createDBSubSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_about\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_codeIPNS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IPNSEncryptedKey\",\"type\":\"string\"}],\"name\":\"createInstanceCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IPNS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IPNSEncryptedKey\",\"type\":\"string\"}],\"name\":\"createSpaceInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"}],\"name\":\"extendInstanceSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gatedContract\",\"type\":\"address\"}],\"name\":\"getAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"getDeterministicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getRemainingSubscriptionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"getSuscriptionDeterministicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"}],\"name\":\"hasActiveSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasMutateAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasViewAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"insertNewMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"instanceSubscription\",\"outputs\":[{\"internalType\":\"contract IGated\",\"name\":\"subscriptionContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"instances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gatedContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isType\",\"outputs\":[{\"internalType\":\"enum Core.Types\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"}],\"name\":\"purchaseInstanceSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"removeMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"safeTransferDomainOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"baseNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"setQUADBNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"subNodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tableIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferDomainOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_codeID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_about\",\"type\":\"string\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_metadataCID\",\"type\":\"string\"}],\"name\":\"updateInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"updateInstanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Create a decentralized Database NameSpaces Where space and subSpaces can get created and anyone can create instances inside a space and contribute to the public this is possible by integrating tableland SQL in solidity FNS system to support a decentralized Namespace of Database spaces IPNS and Push protocol for code and space discussions\",\"kind\":\"dev\",\"methods\":{\"createDBSpace(string)\":{\"details\":\"Create a new space under the given node\",\"params\":{\"_name\":\"The name of the new space\"}},\"createDBSubSpace(bytes32,string)\":{\"details\":\"Create a new subnode under the given node\",\"params\":{\"_DBSpace\":\"The parent node\",\"_name\":\"The name of the new subnode\"}},\"createInstanceCode(bytes32,string,string,string,string)\":{\"details\":\"Create a new instance under the given node\",\"params\":{\"_about\":\"The about of the new instance\",\"_codeIPNS\":\"The IPNS of the new instance\",\"_instance\":\"The parent node\",\"_name\":\"The name of the new instance\"}},\"createSpaceInstance(bytes32,uint256,address[],uint256,string,string,string)\":{\"details\":\"Create a new instance under the given node\",\"params\":{\"_IPNS\":\"The IPNS of the new instance\",\"_IPNSEncryptedKey\":\"The IPNSEncryptedKey of the new instance\",\"_members\":\"The hatID of the new instance\",\"_metadataCID\":\"The metadataCID of the new instance\",\"_node\":\"The parent node\",\"_threshold\":\"The threshold of the new instance\"}},\"hasViewAccess(bytes32,address)\":{\"details\":\"Check if the sender has access to the given instance\",\"params\":{\"_instance\":\"The instance to check\",\"_sender\":\"The sender to check\"},\"returns\":{\"_0\":\"bool\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"QUADB\",\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/QUADB.sol\":\"QUADB\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\nimport {IERC721AUpgradeable} from \\\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\\\";\\n\\ninterface TablelandTablesImpl is ITablelandTables, IERC721AUpgradeable {}\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Sepolia.\\n    address internal constant SEPOLIA =\\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Sepolia.\\n    address internal constant ARBITRUM_SEPOLIA =\\n        0x223A74B8323914afDC3ff1e5005564dC17231d6e;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Calibration.\\n    address internal constant FILECOIN_CALIBRATION =\\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/tableland-js/tree/main/packages/local.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (TablelandTablesImpl) {\\n        if (block.chainid == 1) {\\n            return TablelandTablesImpl(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return TablelandTablesImpl(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return TablelandTablesImpl(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return TablelandTablesImpl(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return TablelandTablesImpl(MATIC);\\n        } else if (block.chainid == 314) {\\n            return TablelandTablesImpl(FILECOIN);\\n        } else if (block.chainid == 11155111) {\\n            return TablelandTablesImpl(SEPOLIA);\\n        } else if (block.chainid == 420) {\\n            return TablelandTablesImpl(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421614) {\\n            return TablelandTablesImpl(ARBITRUM_SEPOLIA);\\n        } else if (block.chainid == 80001) {\\n            return TablelandTablesImpl(MATICMUM);\\n        } else if (block.chainid == 314159) {\\n            return TablelandTablesImpl(FILECOIN_CALIBRATION);\\n        } else if (block.chainid == 31337) {\\n            return TablelandTablesImpl(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the Tableland gateway base URI for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function getBaseURI() internal view returns (string memory) {\\n        if (block.chainid == 1) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 10) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 42161) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 42170) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 137) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 314) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 11155111) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 420) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 421613) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 80001) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 314159) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 31337) {\\n            return \\\"http://localhost:8080/api/v1/\\\";\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad243cc2a9da78a4536c5f67749fa0a6e2646da29acf0c916ae090488b77cfce\",\"license\":\"MIT\"},\"contracts/QUADB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Core} from \\\"./libraries/Core.sol\\\";\\n\\n/**\\n * @title QUADB\\n * @dev Create a decentralized Database NameSpaces\\n * Where space and subSpaces can get created and anyone can\\n * create instances inside a space and contribute to the public\\n * this is possible by integrating tableland SQL in solidity\\n * FNS system to support a decentralized Namespace of Database spaces\\n * IPNS and Push protocol for code and space discussions\\n */\\ncontract QUADB is Core {\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver,\\n        bytes32 _baseNode,\\n        address _gateImplementation,\\n        address _subscriptionImplementation\\n    )\\n        Core(\\n            _registry,\\n            _registrar,\\n            _publicResolver,\\n            _baseNode,\\n            _gateImplementation,\\n            _subscriptionImplementation\\n        )\\n    {}\\n\\n    /**\\n     * @dev Create a new space under the given node\\n     * @param _name The name of the new space\\n     */\\n    function createDBSpace(string calldata _name) public {\\n        bytes32 _newDBSpace = createSubNode(QUADB_NODE, _name);\\n\\n        isType[_newDBSpace] = Types.SUBNODE;\\n\\n        spaceInsertion(_newDBSpace, QUADB_NODE, _name);\\n    }\\n\\n    /**\\n     * @dev Create a new subnode under the given node\\n     * @param _DBSpace The parent node\\n     * @param _name The name of the new subnode\\n     */\\n    function createDBSubSpace(\\n        bytes32 _DBSpace,\\n        string calldata _name\\n    ) external {\\n        require(\\n            isType[_DBSpace] == Types.SUBNODE,\\n            \\\"QUADB: Node is not a subnode\\\"\\n        );\\n\\n        bytes32 _newDBSubSpace = createSubNode(_DBSpace, _name);\\n\\n        isType[_newDBSubSpace] = Types.SUBNODE;\\n\\n        spaceInsertion(_newDBSubSpace, _DBSpace, _name);\\n    }\\n\\n    /**\\n     * @dev Create a new instance under the given node\\n     * @param _node The parent node\\n     * @param _members The hatID of the new instance\\n     * @param _threshold The threshold of the new instance\\n     * @param _metadataCID The metadataCID of the new instance\\n     * @param _IPNS The IPNS of the new instance\\n     * @param _IPNSEncryptedKey The IPNSEncryptedKey of the new instance\\n     */\\n    function createSpaceInstance(\\n        bytes32 _node,\\n        uint256 _price,\\n        address[] calldata _members,\\n        uint256 _threshold,\\n        string calldata _metadataCID,\\n        string calldata _IPNS,\\n        string calldata _IPNSEncryptedKey\\n    ) external {\\n        require(isType[_node] == Types.SUBNODE, \\\"QUADB: Node is not a subnode\\\");\\n\\n        bytes32 _newDBInstance = keccak256(abi.encodePacked(_node, _IPNS));\\n\\n        if (isType[_newDBInstance] != Types.NULL) {\\n            revert InstanceAlreadyExists();\\n        }\\n        address _gatedContract;\\n        if (_members.length > 0) {\\n            _gatedContract = createGatedContract(_members, _newDBInstance);\\n            _insertMembers(_newDBInstance, _members);\\n        }\\n\\n        instances[_newDBInstance] = SpaceInstance(\\n            _gatedContract,\\n            _price,\\n            msg.sender\\n        );\\n\\n        createInstanceType(_newDBInstance, _gatedContract, _price);\\n\\n        instanceInsertion(\\n            _newDBInstance,\\n            uint8(isType[_newDBInstance]),\\n            _node,\\n            _gatedContract,\\n            _price,\\n            _threshold,\\n            _metadataCID,\\n            _IPNS,\\n            _IPNSEncryptedKey\\n        );\\n    }\\n\\n    /**\\n     * @dev Create a new instance under the given node\\n     * @param _instance The parent node\\n     * @param _name The name of the new instance\\n     * @param _about The about of the new instance\\n     * @param _codeIPNS The IPNS of the new instance\\n     */\\n    function createInstanceCode(\\n        bytes32 _instance,\\n        string calldata _name,\\n        string calldata _about,\\n        string calldata _codeIPNS,\\n        string calldata _IPNSEncryptedKey\\n    ) external {\\n        if (!hasMutateAccess(_instance, msg.sender)) {\\n            revert NoInstanceAccess();\\n        }\\n\\n        bytes32 _newDBInstanceCode = keccak256(\\n            abi.encodePacked(_instance, _codeIPNS)\\n        );\\n\\n        if (isType[_newDBInstanceCode] != Types.NULL) {\\n            revert InstanceAlreadyExists();\\n        }\\n        codeOwner[_newDBInstanceCode] = msg.sender;\\n        isType[_newDBInstanceCode] = Types.CODE;\\n\\n        InsertInstanceCode(\\n            _instance,\\n            _newDBInstanceCode,\\n            _name,\\n            _about,\\n            _codeIPNS,\\n            _IPNSEncryptedKey\\n        );\\n    }\\n\\n    function purchaseInstanceSubscription(\\n        bytes32 _instanceID\\n    ) external payable {\\n        purchaseSubscription(_instanceID);\\n        insertSubscription(_instanceID, msg.sender, getTime() + MONTH);\\n    }\\n\\n    function extendInstanceSubscription(bytes32 _instanceID) external payable {\\n        uint256 remaining = getRemainingSubscriptionTime(\\n            _instanceID,\\n            msg.sender\\n        );\\n\\n        extendSubscription(_instanceID);\\n\\n        updateSubscription(_instanceID, msg.sender, remaining + MONTH);\\n    }\\n\\n    function updateCode(\\n        bytes32 _codeID,\\n        string calldata _name,\\n        string calldata _about\\n    ) external {\\n        if (codeOwner[_codeID] != msg.sender) {\\n            revert NoCodeOwner();\\n        }\\n        updateInstanceCode(_codeID, _name, _about);\\n    }\\n\\n    function updateInstance(\\n        bytes32 _instanceID,\\n        string calldata _metadataCID\\n    ) external {\\n        if (instances[_instanceID].creator != msg.sender) {\\n            // revert NoInstanceAccess();\\n            revert(\\\"QUADB: No instance access\\\");\\n        }\\n        updateInstanceMetadata(_instanceID, _metadataCID);\\n    }\\n}\",\"keccak256\":\"0x367d9429e10b85ede8f6bf8880f06da097c9d0f8c8e6a67b4d0e64e043f60969\",\"license\":\"MIT\"},\"contracts/interfaces/IENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IFNSResolver {\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(bytes32 node, address a) external;\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\\ninterface IFNS {\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n}\\n\\ninterface IFNSRegistrar {\\n    function reclaim(uint256 id, address _owner) external;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\",\"keccak256\":\"0xf9d15f020bc8d2d16b8d468bc841bc1002146c46678181e05e447c955ec637c7\",\"license\":\"MIT\"},\"contracts/libraries/Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {FNS} from \\\"./FNS.sol\\\";\\n\\nimport {Gated, IGated} from \\\"./Gated.sol\\\";\\n\\nimport {Tableland} from \\\"./Tableland.sol\\\";\\n\\n/**\\n * @title Core\\n * @dev Interface for the Ens system to support a decentralized Namespace of Database spaces\\n * IPNS for dynamic code and space updates\\n * Tableland SQL in solidity for the databases and subspaces\\n */\\n\\nabstract contract Core is FNS, Gated, Tableland {\\n    \\n    enum Types {\\n        NULL,\\n        PAID_PRIVATE_INSTANCE,\\n        OPEN_PRIVATE_INSTANCE,\\n        PAID_INSTANCE,\\n        OPEN_INSTANCE,\\n        SUBNODE,\\n        CODE\\n    }\\n\\n    struct SpaceInstance {\\n        address gatedContract;\\n        uint256 price;\\n        address creator;\\n    }\\n\\n    mapping(bytes32 => SpaceInstance) public instances;\\n\\n    mapping(bytes32 => address) public codeOwner;\\n\\n    mapping(bytes32 => Types) public isType;\\n\\n    error NoCodeOwner();\\n\\n    error InstanceAlreadyExists();\\n\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver,\\n        bytes32 _baseNode,\\n        address _gatedImplementation,\\n        address _subscriptionImplementation\\n    )\\n        FNS(_registry, _registrar, _publicResolver, _baseNode)\\n        Gated(_gatedImplementation, _subscriptionImplementation)\\n        Tableland()\\n    {}\\n\\n    /**\\n     * @dev createInstanceType\\n     * @param _newDBInstance The new instance\\n     * @param _gatedContract The gatedContract of the new instance\\n     * @param _price The price of the new instance\\n     */\\n    function createInstanceType(\\n        bytes32 _newDBInstance,\\n        address _gatedContract,\\n        uint _price\\n    ) internal {\\n        bool _isPrivate = _gatedContract != address(0);\\n        if (!_isPrivate && _price > 0) {\\n            isType[_newDBInstance] = Types.PAID_INSTANCE;\\n            createSubscription(_price, _newDBInstance);\\n        } else if (_isPrivate && _price > 0) {\\n            isType[_newDBInstance] = Types.PAID_PRIVATE_INSTANCE;\\n            createSubscription(_price, _newDBInstance);\\n        } else if (_isPrivate) {\\n            isType[_newDBInstance] = Types.OPEN_PRIVATE_INSTANCE;\\n        } else {\\n            isType[_newDBInstance] = Types.OPEN_INSTANCE;\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if the sender has access to the given instance\\n     * @param _instance The instance to check\\n     * @param _sender The sender to check\\n     * @return bool\\n     */\\n    function hasViewAccess(\\n        bytes32 _instance,\\n        address _sender\\n    ) public view returns (bool) {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        if (isType[_instance] == Types.PAID_INSTANCE) {\\n            return hasActiveSubscription(_instance, _sender);\\n        } else if (isType[_instance] == Types.PAID_PRIVATE_INSTANCE) {\\n            return\\n                getAccess(_sender, _gatedAddress) ||\\n                hasActiveSubscription(_instance, _sender);\\n        } else if (\\n            isType[_instance] == Types.OPEN_PRIVATE_INSTANCE ||\\n            isType[_instance] == Types.OPEN_INSTANCE\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function hasMutateAccess(\\n        bytes32 _instance,\\n        address _sender\\n    ) public view returns (bool access) {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        Types _instanceType = isType[_instance];\\n        if (_instanceType == Types.PAID_INSTANCE) {\\n            access = instances[_instance].creator == _sender;\\n        } else if (_instanceType == Types.PAID_PRIVATE_INSTANCE) {\\n            access =\\n                getAccess(_sender, _gatedAddress) ||\\n                instances[_instance].creator == _sender;\\n        } else if (_instanceType == Types.OPEN_PRIVATE_INSTANCE) {\\n            access = getAccess(_sender, _gatedAddress);\\n        } else if (_instanceType == Types.OPEN_INSTANCE) {\\n            access = true;\\n        }\\n        uint8 _isType = uint8(_instanceType);\\n        if (_isType > 4 || _instanceType == Types.NULL) {\\n            access = false;\\n        }\\n    }\\n\\n    function insertNewMembers(\\n        bytes32 _instance,\\n        address[] memory _members\\n    ) external {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        address _owner = instances[_instance].creator;\\n        require(_owner == msg.sender, \\\"No access\\\");\\n        if (_gatedAddress != address(0)) {\\n            IGated(_gatedAddress).mint(_members);\\n        }\\n        _insertMembers(_instance, _members);\\n    }\\n\\n    function removeMembers(\\n        bytes32 _instance,\\n        address[] memory _members\\n    ) external {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        address _owner = instances[_instance].creator;\\n        require(_owner == msg.sender, \\\"No access\\\");\\n        if (_gatedAddress != address(0)) {\\n            IGated(_gatedAddress).burn(_members);\\n        }\\n        _removeMembers(_instance, _members);\\n    }\\n\\n    function updateInstanceThreshold(\\n        bytes32 _instance,\\n        uint256 _threshold\\n    ) external {\\n        address _owner = instances[_instance].creator;\\n        require(_owner == msg.sender, \\\"No access\\\");\\n        _updateInstanceThreshold(_instance, _threshold);\\n    }\\n}\",\"keccak256\":\"0xc0db2d033d20be65a1e5d70b8842ccee9e19a14781be60a9240ec47e66e0fbd5\",\"license\":\"MIT\"},\"contracts/libraries/FNS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IFNSResolver, IFNS, IFNSRegistrar} from \\\"../interfaces/IENSResolver.sol\\\";\\n\\n/**\\n * @title FNS\\n * @dev Interface for the FNS system to support a decentralized Namespace of Database spaces\\n * IPNS and Push protocol for code and space discussions\\n * Tableland SQL in solidity for the databases and subspaces\\n */\\n\\nabstract contract FNS is IERC721Receiver, Ownable {\\n    IFNS public immutable REGISTRY;\\n    IFNSRegistrar public immutable REGISTRAR;\\n    IFNSResolver public immutable PUBLIC_RESOLVER;\\n\\n    bytes32 public QUADB_NODE;\\n    bytes32 private BASE_NODE;\\n    uint256 public DOMAIN_ID;\\n\\n    mapping(bytes32 => mapping(string => bool)) public subNodes;\\n\\n    error NoInstanceAccess();\\n    error InvalidTokenAmount();\\n    error InvalidTokenSender();\\n    error SubNodeAlreadyExists();\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver,\\n        bytes32 _baseNode\\n    ) {\\n        REGISTRY = IFNS(_registry);\\n        REGISTRAR = IFNSRegistrar(_registrar);\\n        PUBLIC_RESOLVER = IFNSResolver(_publicResolver);\\n        BASE_NODE = _baseNode;\\n    }\\n\\n    /*\\n     * @dev Function to create a new subnode.\\n     * @param {bytes32} node - Parent node.\\n     * @param {string} subNode - Subnode name.\\n     * @return {bytes32} - New subnode.\\n     */\\n    function createSubNode(\\n        bytes32 parentNode,\\n        string memory subNode\\n    ) internal returns (bytes32 newSubNode) {\\n        bytes32 label = keccak256(bytes(subNode));\\n\\n        if (subNodes[parentNode][subNode]) {\\n            revert SubNodeAlreadyExists();\\n        }\\n\\n        subNodes[parentNode][subNode] = true;\\n\\n        REGISTRY.setSubnodeRecord(\\n            // Gaming character subnode\\n            parentNode,\\n            // Character tokenID as sub.subdomain to the gaming character subdomain\\n            label,\\n            // Owner\\n            address(this),\\n            // Resolver\\n            address(PUBLIC_RESOLVER),\\n            // TTL\\n            0\\n        );\\n\\n        newSubNode = _makeNode(parentNode, label);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external view returns (bytes4) {\\n        if (msg.sender != address(REGISTRAR)) {\\n            revert InvalidTokenSender();\\n        }\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function setQUADBNode(\\n        uint256 tokenId,\\n        bytes32 baseNode,\\n        bytes32 node\\n    ) external onlyOwner {\\n        DOMAIN_ID = tokenId;\\n        BASE_NODE = baseNode;\\n        QUADB_NODE = node;\\n    }\\n\\n    function safeTransferDomainOwnership(\\n        address contractAddress,\\n        address newOwner\\n    ) external onlyOwner{\\n        REGISTRAR.safeTransferFrom(contractAddress, newOwner, DOMAIN_ID);\\n        QUADB_NODE = bytes32(0);\\n    }\\n\\n    function transferDomainOwnership(\\n        address contractAddress,\\n        address newOwner\\n    ) external onlyOwner {\\n        REGISTRAR.transferFrom(contractAddress, newOwner, DOMAIN_ID);\\n        QUADB_NODE = bytes32(0);\\n    }\\n\\n    function _makeNode(\\n        bytes32 node,\\n        bytes32 labelhash\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(node, labelhash));\\n    }\\n}\",\"keccak256\":\"0x96b52710b8f076f00c4d8d7816e66f8aeb8b0196991d466065b23023c0f98276\",\"license\":\"MIT\"},\"contracts/libraries/Gated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ninterface IGated {\\n    function mint(address[] memory newMembers) external;\\n\\n    function burn(address[] memory _members) external;\\n\\n    function getRemainingTime(address owner) external view returns (uint256);\\n\\n    function subscribe(address newMember) external;\\n\\n    function extendSubscription(address member) external;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\\nabstract contract Gated {\\n    address internal gatedImplementation;\\n    address internal subscriptionImplementation;\\n    uint256 internal constant MONTH = 30 days;\\n\\n    struct SubscriptionStruct {\\n        IGated subscriptionContract;\\n        address creator;\\n        uint256 prize;\\n    }\\n\\n    mapping(bytes32 => SubscriptionStruct) public instanceSubscription;\\n\\n    // Constructor\\n    constructor(\\n        address _gatedImplementation,\\n        address _subscriptionImplementation\\n    ) {\\n        gatedImplementation = _gatedImplementation;\\n        subscriptionImplementation = _subscriptionImplementation;\\n    }\\n\\n    function createSubscription(uint _keyPrice, bytes32 _instanceID) internal {\\n        instanceSubscription[_instanceID] = SubscriptionStruct({\\n            subscriptionContract: IGated(\\n                creatSubscriptionContract(_instanceID)\\n            ),\\n            creator: msg.sender,\\n            prize: _keyPrice\\n        });\\n    }\\n\\n    // Function to create a new OptimisticResolver contract and associate it with a schema\\n    function createGatedContract(\\n        address[] memory _members,\\n        bytes32 salt\\n    ) internal returns (address accessControlClone) {\\n        // Create new resolver contract\\n        accessControlClone = Clones.cloneDeterministic(\\n            gatedImplementation,\\n            salt\\n        );\\n\\n        (bool success, ) = accessControlClone.call(\\n            abi.encodeWithSignature(\\\"initialize(address[])\\\", _members)\\n        );\\n\\n        require(success, \\\"error deploying\\\");\\n    }\\n\\n    // Function to create a new OptimisticResolver contract and associate it with a schema\\n    function creatSubscriptionContract(\\n        bytes32 salt\\n    ) internal returns (address accessControlClone) {\\n        // Create new resolver contract\\n        accessControlClone = Clones.cloneDeterministic(\\n            subscriptionImplementation,\\n            salt\\n        );\\n\\n        (bool success, ) = accessControlClone.call(\\n            abi.encodeWithSignature(\\\"initialize(address)\\\", address(this))\\n        );\\n\\n        require(success, \\\"error deploying\\\");\\n    }\\n\\n    function getDeterministicAddress(\\n        bytes32 _salt\\n    ) public view returns (address) {\\n        return Clones.predictDeterministicAddress(gatedImplementation, _salt);\\n    }\\n\\n    function getSuscriptionDeterministicAddress(\\n        bytes32 _salt\\n    ) public view returns (address) {\\n        return\\n            Clones.predictDeterministicAddress(\\n                subscriptionImplementation,\\n                _salt\\n            );\\n    }\\n\\n    function getAccess(\\n        address _sender,\\n        address _gatedContract\\n    ) public view returns (bool) {\\n        return\\n            _gatedContract == address(0)\\n                ? false\\n                : IERC721(_gatedContract).balanceOf(_sender) > 0;\\n    }\\n\\n    function getRemainingSubscriptionTime(\\n        bytes32 _instanceID,\\n        address _owner\\n    ) public view returns (uint256) {\\n        return\\n            instanceSubscription[_instanceID]\\n                .subscriptionContract\\n                .getRemainingTime(_owner);\\n    }\\n\\n    function hasActiveSubscription(\\n        bytes32 _instanceID,\\n        address _subscriber\\n    ) public view returns (bool) {\\n        return\\n            instanceSubscription[_instanceID].subscriptionContract.balanceOf(\\n                _subscriber\\n            ) > 0;\\n    }\\n\\n    /**\\n     * @dev PurchaseSubscription function for an agentID\\n     * @param _instanceID to subscribe\\n     */\\n    function purchaseSubscription(bytes32 _instanceID) internal {\\n        uint256 _priceToPay = instanceSubscription[_instanceID].prize;\\n        require(\\n            _priceToPay == msg.value,\\n            \\\"QUADB: No price set for this instance\\\"\\n        );\\n\\n        instanceSubscription[_instanceID].subscriptionContract.subscribe(\\n            msg.sender\\n        );\\n\\n        Address.sendValue(\\n            payable(instanceSubscription[_instanceID].creator),\\n            (msg.value * 99) / 100\\n        );\\n    }\\n\\n    function extendSubscription(bytes32 _instanceID) internal {\\n        uint256 _priceToPay = instanceSubscription[_instanceID].prize;\\n\\n        require(\\n            _priceToPay == msg.value,\\n            \\\"QUADB: No price set for this instance\\\"\\n        );\\n\\n        instanceSubscription[_instanceID]\\n            .subscriptionContract\\n            .extendSubscription(msg.sender);\\n\\n        Address.sendValue(\\n            payable(instanceSubscription[_instanceID].creator),\\n            (msg.value * 99) / 100\\n        );\\n    }\\n\\n    function getTime() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    // Function to receive Ethers\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x4c7b698a4b54726bfc4695186bae8a2ecea99f60438c4f397e6dd754734f373b\",\"license\":\"MIT\"},\"contracts/libraries/Tableland.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {TablelandDeployments} from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport {ITablelandTables} from \\\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\\\";\\n\\nimport {SQLHelpers} from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nabstract contract Tableland {\\n    ITablelandTables public immutable TABLELAND;\\n\\n    string[] internal createTableStatements;\\n\\n    string[] public tables;\\n\\n    uint256[] public tableIDs;\\n\\n    string internal constant DBSPACES_TABLE_PREFIX = \\\"db_spaces\\\";\\n\\n    string internal constant DBSPACES_SCHEMA =\\n        \\\"DBSpaceID text, DBSubSpaceOfID text, DBSubSpaceName text\\\";\\n\\n    string internal constant DBSPACES_INSTANCES_TABLE_PREFIX =\\n        \\\"db_spaces_instances\\\";\\n\\n    string internal constant DBSPACES_INSTANCES_SCHEMA =\\n        \\\"InstanceID text, instanceOfSpace text, instanceType text, metadataCID text, IPNS text, IPNSEncryptedKey text, gatedContract text, price text, creator text, threshold text\\\";\\n\\n    string internal constant DB_INSTANCES_CODES_TABLE_PREFIX =\\n        \\\"instances_codes\\\";\\n\\n    string internal constant DB_INSTANCES_CODES_SCHEMA =\\n        \\\"InstanceID text, codeID text, name text, about text, IPNS text, IPNSEncryptedKey text, creator text\\\";\\n\\n    string internal constant SUBSCRIPTIONS_TABLE_PREFIX = \\\"subscriptions\\\";\\n\\n    string internal constant SUBSCRIPTIONS_SCHEMA =\\n        \\\"InstanceID text, subscriber text, endsAt text\\\";\\n\\n    string internal constant DB_INSTANCES_MEMBERS_TABLE_PREFIX = \\\"members\\\";\\n\\n    string internal constant DB_INSTANCES_MEMBERS_SCHEMA =\\n        \\\"InstanceID text, member text\\\";\\n\\n    constructor() {\\n        TABLELAND = TablelandDeployments.get();\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DBSPACES_SCHEMA,\\n                DBSPACES_TABLE_PREFIX\\n            )\\n        );\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DBSPACES_INSTANCES_SCHEMA,\\n                DBSPACES_INSTANCES_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DB_INSTANCES_CODES_SCHEMA,\\n                DB_INSTANCES_CODES_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                SUBSCRIPTIONS_SCHEMA,\\n                SUBSCRIPTIONS_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DB_INSTANCES_MEMBERS_SCHEMA,\\n                DB_INSTANCES_MEMBERS_TABLE_PREFIX\\n            )\\n        );\\n\\n        tableIDs = TABLELAND.create(address(this), createTableStatements);\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(DBSPACES_TABLE_PREFIX, tableIDs[0])\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1]\\n            )\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2]\\n            )\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(SUBSCRIPTIONS_TABLE_PREFIX, tableIDs[3])\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                tableIDs[4]\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new space.\\n     * @param {bytes32} DBSpaceID - DBSpace ID.\\n     * @param {bytes32} DBSubSpaceOfID - DBSubSpaceOf ID.\\n     * @param {string} DBSpaceName - Name of the space.\\n     * @param {string} DBSubSpaceOfName - Name of the sub space.\\n     */\\n\\n    function spaceInsertion(\\n        bytes32 DBSpaceID,\\n        bytes32 DBSubSpaceOfID,\\n        string memory DBSubSpaceName\\n    ) internal {\\n        mutate(\\n            tableIDs[0],\\n            SQLHelpers.toInsert(\\n                DBSPACES_TABLE_PREFIX,\\n                tableIDs[0],\\n                \\\"DBSpaceID, DBSubSpaceOfID, DBSubSpaceName\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(DBSpaceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(DBSubSpaceOfID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(DBSubSpaceName)\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new instance.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {bytes32} instanceOfSpace - DBSpace ID.\\n     * @param {string} name - Name of the instance.\\n     * @param {string} about - About of the instance.\\n     * @param {string} img - Image of the instance.\\n     * @param {string} IPNS - IPNS of the instance.\\n     * @param {string} IPNSEncryptedKey - Creator of the instance.\\n     */\\n\\n    function instanceInsertion(\\n        bytes32 _instanceID,\\n        uint8 _lockType,\\n        bytes32 _instanceOfSpace,\\n        address _gatedContract,\\n        uint256 price,\\n        uint256 threshold,\\n        string memory metadataCID,\\n        string memory IPNS,\\n        string memory IPNSEncryptedKey\\n    ) internal {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toInsert(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1],\\n                \\\"InstanceID, instanceOfSpace, instanceType, metadataCID, IPNS, IPNSEncryptedKey, gatedContract, price, creator, threshold\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(_instanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(_instanceOfSpace)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(_lockType)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(metadataCID),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(IPNS),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(IPNSEncryptedKey),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(_gatedContract)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(price)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(msg.sender)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(threshold))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new instance code.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {string} name - Name of the instance code.\\n     * @param {string} about - About of the instance code.\\n     * @param {string} codeIPNS - IPNS of the instance code.\\n     * @param {string} IPNSEncryptedKey - Creator of the instance code.\\n     */\\n\\n    function InsertInstanceCode(\\n        bytes32 _instanceID,\\n        bytes32 _codeID,\\n        string memory name,\\n        string memory about,\\n        string memory codeIPNS,\\n        string memory IPNSEncryptedKey\\n    ) internal {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toInsert(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2],\\n                \\\"InstanceID, codeID, name, about, IPNS, IPNSEncryptedKey, creator\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(_instanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(_codeID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(name),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(about),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(codeIPNS),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(IPNSEncryptedKey),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(msg.sender))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateInstanceMetadata(\\n        bytes32 InstanceID,\\n        string memory metadataCID\\n    ) internal {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toUpdate(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1],\\n                string.concat(\\\"metadataCID = \\\", SQLHelpers.quote(metadataCID)),\\n                string.concat(\\n                    \\\"InstanceID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(InstanceID))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateInstanceCode(\\n        bytes32 codeID,\\n        string memory name,\\n        string memory about\\n    ) internal {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toUpdate(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2],\\n                string.concat(\\n                    \\\"name = \\\",\\n                    SQLHelpers.quote(name),\\n                    \\\", about = \\\",\\n                    SQLHelpers.quote(about)\\n                ),\\n                string.concat(\\n                    \\\"codeID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(codeID))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new subscription.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {address} subscriber - Subscriber address.\\n     * @param {uint256} tokenID - Subscription token ID.\\n     * @param {uint256} endsAt - Subscription end date.\\n     */\\n    function insertSubscription(\\n        bytes32 InstanceID,\\n        address subscriber,\\n        uint256 endsAt\\n    ) internal {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toInsert(\\n                SUBSCRIPTIONS_TABLE_PREFIX,\\n                tableIDs[3],\\n                \\\"InstanceID, subscriber, endsAt\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(InstanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(subscriber)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(endsAt))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateSubscription(\\n        bytes32 InstanceID,\\n        address subscriber,\\n        uint256 endsAt\\n    ) internal {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toUpdate(\\n                SUBSCRIPTIONS_TABLE_PREFIX,\\n                tableIDs[3],\\n                string.concat(\\n                    \\\"endsAt = \\\",\\n                    SQLHelpers.quote(Strings.toString(endsAt))\\n                ),\\n                string.concat(\\n                    \\\"InstanceID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(InstanceID)),\\n                    \\\" AND subscriber = \\\",\\n                    SQLHelpers.quote(Strings.toHexString(subscriber))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert the members.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {address[]} members - Members address array.\\n     */\\n    function _insertMembers(\\n        bytes32 InstanceID,\\n        address[] memory members\\n    ) internal {\\n        string memory id = bytes32ToString(InstanceID);\\n        for (uint256 i = 0; i < members.length; i++) {\\n            mutate(\\n                tableIDs[4],\\n                SQLHelpers.toInsert(\\n                    DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                    tableIDs[4],\\n                    \\\"InstanceID, member\\\",\\n                    string.concat(\\n                        SQLHelpers.quote(id),\\n                        \\\",\\\",\\n                        SQLHelpers.quote(Strings.toHexString(members[i]))\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function _removeMembers(\\n        bytes32 InstanceID,\\n        address[] memory members\\n    ) internal {\\n        string memory id = bytes32ToString(InstanceID);\\n        for (uint256 i = 0; i < members.length; i++) {\\n            mutate(\\n                tableIDs[4],\\n                SQLHelpers.toDelete(\\n                    DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                    tableIDs[4],\\n                    string.concat(\\n                        \\\"InstanceID = \\\",\\n                        SQLHelpers.quote(id),\\n                        \\\" AND member = \\\",\\n                        SQLHelpers.quote(Strings.toHexString(members[i]))\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function _updateInstanceThreshold(\\n        bytes32 InstanceID,\\n        uint256 threshold\\n    ) internal {\\n        mutate(tableIDs[1], SQLHelpers.toUpdate(DBSPACES_INSTANCES_TABLE_PREFIX, tableIDs[1], string.concat(\\\"threshold = \\\", SQLHelpers.quote(Strings.toString(threshold))), string.concat(\\\"InstanceID = \\\", SQLHelpers.quote(bytes32ToString(InstanceID)))));\\n    }\\n\\n    /*\\n     * @dev Internal function to convert bytes32 to string.\\n     * @param {bytes32} data - Data to convert.\\n     * @return {string} - Converted data.\\n     */\\n\\n    function bytes32ToString(\\n        bytes32 data\\n    ) internal pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    /*\\n     * @dev Internal function to execute a mutation on a table.\\n     * @param {uint256} tableId - Table ID.\\n     * @param {string} statement - Mutation statement.\\n     */\\n    function mutate(uint256 tableId, string memory statement) internal {\\n        TABLELAND.mutate(address(this), tableId, statement);\\n    }\\n}\\n\",\"keccak256\":\"0x2d11789cf8f1584adfeca7600232b2983dc88e96c45bbb7355c8eb6a0d33bbb8\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721AUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    /**\\n     * `_sequentialUpTo()` must be greater than `_startTokenId()`.\\n     */\\n    error SequentialUpToTooSmall();\\n\\n    /**\\n     * The `tokenId` of a sequential mint exceeds `_sequentialUpTo()`.\\n     */\\n    error SequentialMintExceedsLimit();\\n\\n    /**\\n     * Spot minting requires a `tokenId` greater than `_sequentialUpTo()`.\\n     */\\n    error SpotMintTokenIdTooSmall();\\n\\n    /**\\n     * Cannot mint over a token that already exists.\\n     */\\n    error TokenAlreadyExists();\\n\\n    /**\\n     * The feature is not compatible with spot mints.\\n     */\\n    error NotCompatibleWithSpotMints();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xaeabed185f4b889c097e61ef486a003e64cdc2d048b569ebcd315ff52a63367b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604090808252346200092a5760c0816200476880380380916200002682856200097d565b8339810103126200092a576200003c81620009a1565b60206200004b818401620009a1565b9162000059858501620009a1565b6060850151916200007b60a06200007360808901620009a1565b9701620009a1565b600093845460018060a01b0319943386831617875560018060a01b0380998180978195823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08d80a3166080521660a0521660c0526002558160059716838854161787551690600654161760065582620000f662001064565b1660e052620001746200016e86516200010f816200092f565b603881527f44425370616365494420746578742c20444253756253706163654f6649442074858201527f6578742c20444253756253706163654e616d65207465787400000000000000008882015262000167620009d2565b9062000fe7565b62000a81565b84516001600160401b03939060e0810185811182821017620009165762000279916200016e91895260aa81527f496e7374616e6365494420746578742c20696e7374616e63654f665370616365868201527f20746578742c20696e7374616e63655479706520746578742c206d6574616461898201527f746143494420746578742c2049504e5320746578742c2049504e53456e63727960608201527f707465644b657920746578742c206761746564436f6e7472616374207465787460808201527f2c20707269636520746578742c2063726561746f7220746578742c207468726560a0820152691cda1bdb19081d195e1d60b21b60c08201526200016762000d16565b855160a0810181811086821117620009165762000321916200016e918952606381527f496e7374616e6365494420746578742c20636f6465494420746578742c206e61868201527f6d6520746578742c2061626f757420746578742c2049504e5320746578742c20898201527f49504e53456e637279707465644b657920746578742c2063726561746f722074606082015262195e1d60ea1b60808201526200016762000d51565b6200037e6200016e875162000336816200092f565b602d81527f496e7374616e6365494420746578742c20737562736372696265722074657874868201526c0b08195b991cd05d081d195e1d609a1b898201526200016762000d7e565b620003c286516200038f8162000961565b601c81527f496e7374616e6365494420746578742c206d656d626572207465787400000000858201526200016762000da9565b90600854906801000000000000000092838310156200090257620003ee600193848101600855620009f9565b919091620008ee57805190888211620008da5781906200040f845462000a2b565b601f81116200089d575b508890601f8311600114620008395788926200082d575b5050600019600383901b1c191690841b1790555b60e05116948751926361a23d0f60e01b845260448401978585600499308b83015260249b8d8d84015260085480915260648301606482871b85010191600886528c808720928b88925b84841062000778575050505050508383809203925af19485156200076e578695620006bc575b50508351918211620006aa578111620006985784600a9384548386558084106200067b575b500183855285852083865b84811062000668575050505050620004fa620009d2565b8254156200065657620005196200051f91848652868620549062000dfb565b62000bd8565b6200052962000d16565b90825481101562000656576200054d91620005199184865286862001549062000dfb565b6200055762000d51565b8154600210156200064457620005196200057c91838552600286862001549062000dfb565b6200058662000d7e565b815460031015620006445762000519620005ab91838552600386862001549062000dfb565b620005b562000da9565b9481548510156200063357508152200154620005d79162000519919062000dfb565b516135529081620012168239608051818181611ebb01526125d6015260a0518181816108f401528181610b9101528181610f400152611ca5015260c0518181816101e80152612633015260e05181818161054a015261348f0152f35b634e487b7160e01b83526032855282fd5b634e487b7160e01b8352603285528583fd5b634e487b7160e01b8452603286528684fd5b88845194019381840155018490620004e3565b8587528287206200069191810190850162000a68565b38620004d8565b634e487b7160e01b8452604186528684fd5b634e487b7160e01b8552604187528785fd5b909194503d8087833e620006d181836200097d565b81019087818303126200076a5780519084821162000754570181601f820112156200076a57805192848411620007585783901b908b5193620007168a8401866200097d565b84528880850192820101928311620007545788809101915b838310620007435750505050923880620004b3565b82518152918101918991016200072e565b8780fd5b634e487b7160e01b885260418a528a88fd5b8680fd5b8a513d88823e3d90fd5b929591949750929597506063198d82030184528d908754906200079b8262000a2b565b91828252858581831692836000146200081157505050600114620007d3575b50508290960192019201928b95938b95938b8f6200048d565b908f92508883528383205b818410620007f35750500181018238620007ba565b80959193959492945483878701015201930190918f928d94620007de565b91955093915060ff19168383015215158b1b01019038620007ba565b01519050388062000430565b8489528989208794509190601f1984168a5b8c8282106200088657505084116200086c575b505050811b01905562000444565b015160001960f88460031b161c191690553880806200085e565b8385015186558a979095019493840193016200084b565b620008c890858a528a8a208d601f8601811c8201928d8710620008cf575b601f01901c019062000a68565b3862000419565b9192508291620008bb565b634e487b7160e01b87526041600452602487fd5b634e487b7160e01b86526004869052602486fd5b634e487b7160e01b85526041600452602485fd5b634e487b7160e01b84526041600452602484fd5b600080fd5b606081019081106001600160401b038211176200094b57604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176200094b57604052565b601f909101601f19168101906001600160401b038211908210176200094b57604052565b51906001600160a01b03821682036200092a57565b6001600160401b0381116200094b57601f01601f191660200190565b60405190620009e18262000961565b600982526864625f73706163657360b81b6020830152565b60085481101562000a1557600860005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c9216801562000a5d575b602083101462000a4757565b634e487b7160e01b600052602260045260246000fd5b91607f169162000a3b565b81811062000a74575050565b6000815560010162000a68565b600854680100000000000000008110156200094b5762000aa9600191828101600855620009f9565b92909262000bc2578051906001600160401b0382116200094b5762000acf845462000a2b565b601f811162000b80575b5060209081601f841160011462000b19575092829391839260009462000b0d575b50501b916000199060031b1c1916179055565b01519250388062000afa565b919083601f1981168760005284600020946000905b8883831062000b65575050501062000b4b575b505050811b019055565b015160001960f88460031b161c1916905538808062000b41565b85870151885590960195948501948793509081019062000b2e565b62000bb090856000526020600020601f850160051c8101916020861062000bb7575b601f0160051c019062000a68565b3862000ad9565b909150819062000ba2565b634e487b7160e01b600052600060045260246000fd5b600954680100000000000000008110156200094b576001918282018060095582101562000a15576009600090815281517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90930193602093929091906001600160401b03841162000d025762000c4f865462000a2b565b601f811162000cd0575b508491601f851160011462000c8857939450849291908362000b0d5750501b916000199060031b1c1916179055565b86815285812093958591601f198316915b8883831062000cb5575050501062000b4b57505050811b019055565b85870151885590960195948501948793509081019062000c99565b62000cfb90878452868420601f870160051c81019188881062000bb757601f0160051c019062000a68565b3862000c59565b634e487b7160e01b82526041600452602482fd5b6040519062000d258262000961565b601382527f64625f7370616365735f696e7374616e636573000000000000000000000000006020830152565b6040519062000d608262000961565b600f82526e696e7374616e6365735f636f64657360881b6020830152565b6040519062000d8d8262000961565b600d82526c737562736372697074696f6e7360981b6020830152565b6040519062000db88262000961565b60078252666d656d6265727360c81b6020830152565b9081519160005b83811062000de7575050016000815290565b806020809284010151818501520162000dd5565b62000e649062000e5562000e3793600162000e2162000e1a4662000e67565b9262000e67565b9162000e4a604051978896602088019062000dce565b9183605f60f81b93848152019062000dce565b908152019062000dce565b03601f1981018352826200097d565b90565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101562000fd8575b506d04ee2d6d415b85acef81000000008083101562000fc8575b50662386f26fc100008083101562000fb8575b506305f5e1008083101562000fa8575b506127108083101562000f98575b50606482101562000f87575b600a8092101562000f7c575b6001908160218186019562000f0987620009b6565b9662000f1960405198896200097d565b80885262000f2a601f1991620009b6565b01366020890137860101905b62000f43575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821562000f765791908262000f36565b62000f3c565b916001019162000ef4565b919060646002910491019162000ee8565b6004919392049101913862000edc565b6008919392049101913862000ece565b6010919392049101913862000ebe565b6020919392049101913862000eab565b60409350810491503862000e91565b60016200102f926200104d62000e6493836200103e620010074662000e67565b82604051998a976c021a922a0aa22902a20a126229609d1b60208a0152602d89019062000dce565b605f60f81b8152019062000dce565b600560fb1b8152019062000dce565b602960f81b815203601e198101845201826200097d565b46600103620010855773012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a03620010a65773fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b103620010c857739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba03620010ea57731a22854c5b1642760a827f20137a67930ae108d290565b466089036200110b57735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a036200112d577359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a703620011505773c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a403620011725773c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eee03620011955773223a74b8323914afdc3ff1e5005564dc17231d6e90565b466201388103620011b857734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f03620011db5773030bcf3d50cad04c2e57391b12740982a930862190565b46617a6903620011fd5773e7f1725e7734ce288f8367e1bb143e90bb3f051290565b60405163264e42cf60e01b8152466004820152602490fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816306433b1b14611ea7575080630c9ddf6d14611d2a57806311ad2f3414611cf7578063150b7a0214611c5e578063248a5b1914611ba75780632711447f14611b5a578063284e82e8146119765780632ed76119146113535780633e203835146113245780633ec29e721461121057806347d121c5146111e9578063557ed1ba146111ce578063606410db146111b05780636120161214611130578063715018a6146110d657806371671bf214610faa57806379e63e1014610f0f5780637a9b777414610e9e578063820cc55714610e8057806384ec965314610e535780638897538314610e2c5780638a8fd25014610dda5780638da5cb5b14610db35780639ad66a2314610c215780639da308a414610b60578063a58dcc9514610b35578063a5df63d614610b04578063b35b8e7414610ad0578063ba0d18aa14610a83578063bfc51b7e146109f7578063c91f6694146109c8578063ca16ac8014610923578063cb609077146108de578063d0ed111014610579578063d68d087c14610534578063e0cf1e4c1461032d578063e2b1e4ed146102e0578063f2fde38b1461021a5763ffeb4a300361000f57346102175780600319360112610217576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b80fd5b503461021757602036600319011261021757610234611f1c565b61023c61224e565b6001600160a01b0390811690811561028c57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5034610217576020366003190112610217576004358152600d60205260ff60408220541660405190600781101561031957602092508152f35b634e487b7160e01b83526021600452602483fd5b50346102175761033c3661220b565b8183929352602090600b8252604083209360018060a01b039461036a866002818454169301541633146124e2565b806104ce575b5061037a90613369565b91835b82518110156104ca576104c5906104c0660102ba422a922960cd1b88610463886104b9896103de8a6103ad612115565b969054978b6103ea6103e56103c061323c565b936103c9612115565b989054946103d860039d612f04565b9a61325f565b5116612f73565b612f04565b9461045a6040519687878101996c024b739ba30b731b2a4a2101e9609d1b8b526d01020a7221036b2b6b132b9101e960951b815161043081602d948d8688019101612037565b83019182015282519061044b82603b958c8785019101612037565b0103601b810189520187611fc4565b881b1c90612d1f565b916040519889936b02222a622aa2290232927a6960a51b8486015261049281518092602c968789019101612037565b84019283015251906104aa8260339586840190612037565b01036013810187520185611fc4565b1b1c61348d565b613217565b61037d565b8480f35b803b156105305784604051809263362eb0ab60e11b82528183816104f5896004830161251a565b03925af180156105255790859161050d575b50610370565b61051690611f7b565b610521578338610507565b8380fd5b6040513d87823e3d90fd5b8480fd5b50346102175780600319360112610217576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102175760a0366003190112610217576004356001600160401b03602435818111610521576105ae903690600401611eea565b926044358381116108da576105c7903690600401611eea565b9290916064358581116108d6576105e2903690600401611eea565b9390956084359081116108d2576105fd903690600401611eea565b96909161060a33856123df565b156108c057604051948a60209661063f6040828a8101948a86528c89848401378c82019083820152038a810184520182611fc4565b519020998a8c52600d875260ff60408d20541660078110156108ac5761089a578a8c52600c875260408c20336001600160601b0360a01b825416179055600d875260408c2060ff198154166006179055369061069a92612000565b9636906106a692612000565b9436906106b292612000565b9536906106be92612000565b6106c661205a565b979054966106d261308b565b966106db61205a565b949054956106e890613369565b6106f190612f04565b936106fb90613369565b61070490612f04565b9161070e90612f04565b9761071890612f04565b9261072290612f04565b9061072c90612f04565b9061073633612f73565b61073f90612f04565b9360405199868b975190818c808b0192019161075a92612037565b870194600b60fa1b95868c820152815191828d6021840192019161077d92612037565b01856021820152815191828c6022840192019161079992612037565b01846022820152815191828b602384019201916107b592612037565b01836023820152815191828a602484019201916107d192612037565b018260248201528151918289602584019201916107ed92612037565b0190602582015281519182876026840192019161080992612037565b010360068101855260260161081e9085611fc4565b6040519261082b84611f8e565b6040845283017f496e7374616e636549442c20636f646549442c206e616d652c2061626f75742c9052604083017f2049504e532c2049504e53456e637279707465644b65792c2063726561746f72905260031b1c61088893612c7f565b9160031b1c906108979161348d565b80f35b604051631144626f60e01b8152600490fd5b634e487b7160e01b8d52602160045260248dfd5b6040516346627df160e01b8152600490fd5b8880fd5b8780fd5b8580fd5b50346102175780600319360112610217576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610217576109323661220b565b818352600b602052826040812061095a60018060a01b036002818454169301541633146124e2565b8061096b575b505061089791613273565b803b156109c457816040518092632f41d6e160e21b8252818381610992896004830161251a565b03925af180156109b95715610960576109aa90611f7b565b6109b5578238610960565b8280fd5b6040513d84823e3d90fd5b5080fd5b5034610217576060366003190112610217576109e261224e565b60043560035560243560025560443560015580f35b503461021757610a0636611f48565b909291808352600d60205260ff6040842054166007811015610a6f576108979394610a366005610a6993146122a6565b610a4a610a44368684612000565b8461255e565b808752600d60205260408720805460ff19166005179055933691612000565b91612bc8565b634e487b7160e01b84526021600452602484fd5b5034610217576020366003190112610217576040606091600435815260076020522060018060a01b0390600282825416926001830154169101549060405192835260208301526040820152f35b503461021757602036600319011261021757602060018060a01b03610afb600435826006541661286f565b60405191168152f35b5034610217576040366003190112610217576020610b2b610b23611f32565b6004356129d5565b6040519015158152f35b503461021757602036600319011261021757602060018060a01b03610afb600435826005541661286f565b50346102175760403660031901126102175780610b7b611f1c565b610b83611f32565b90610b8c61224e565b6003547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b15610530576040516323b872dd60e01b81526001600160a01b039384166004820152939092166024840152604483015282908290818381606481015b03925af180156109b957610c0d575b5060015580f35b610c1690611f7b565b610217578038610c06565b506020366003190112610217576004358082526007602052610c4b60026040842001543414612a23565b808252600760205260408220546001600160a01b039083908216803b156109c4578180916024604051809481936320d3b93560e11b83523360048401525af180156109b957610d9f575b5082905260076020526001604084200154166063340234810460631434151715610d8b57906064610cc7920490612a7d565b62278d00420190814211610d775761089791610d6d6103e592610ce86120de565b94905493610d2b610cf76131ee565b91610d0c610d036120de565b95905496613369565b90610d256103e5610d1f6103e533612f73565b92612d9c565b91612b58565b9260405192610d3984611fa9565b601e84527f496e7374616e636549442c20737562736372696265722c20656e647341740000602085015260031b1c90612c7f565b9160031b1c61348d565b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b84526011600452602484fd5b610da890611f7b565b6109b5578238610c95565b5034610217578060031936011261021757546040516001600160a01b039091168152602090f35b503461021757602036600319011261021757600435600a548110156109c457602090600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80154604051908152f35b5034610217576040366003190112610217576020610b2b610e4b611f32565b6004356123df565b5034610217576040366003190112610217576020610b2b610e72611f1c565b610e7a611f32565b906128c7565b50346102175780600319360112610217576020600354604051908152f35b5034610217576020366003190112610217576004356001600160401b0381116109c457610ed2610897913690600401611eea565b610a69610eec600154610ee6368587612000565b9061255e565b92838652600d60205260408620600560ff19825416179055600154923691612000565b50346102175760403660031901126102175780610f2a611f1c565b610f32611f32565b90610f3b61224e565b6003547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b1561053057604051632142170760e11b81526001600160a01b03938416600482015293909216602484015260448301528290829081838160648101610bf7565b5034610217576020806003193601126109c4576004356009548110156109b55760096000527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0190604051918381549460019086821c938288169788156110cc575b86861089146110b857868899878a98999a529182600014611094575050600114611058575b50505061104092500383611fc4565b611054604051928284938452830190612180565b0390f35b869350819291528282205b85831061107c5750506110409350820101388080611031565b80548389018501528794508693909201918101611063565b93509450505061104094915060ff191682840152151560051b820101388080611031565b634e487b7160e01b83526022600452602483fd5b94607f169461100c565b50346102175780600319360112610217576110ef61224e565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610217576040366003190112610217576024356001600160401b0381116109c457366023820112156109c45761119b60208093604061117d60ff953690602481600401359101612000565b91600435815260048452208260405194838680955193849201612037565b82019081520301902054166040519015158152f35b50346102175780600319360112610217576020600154604051908152f35b50346102175780600319360112610217576020604051428152f35b5034610217576040366003190112610217576020610b2b611208611f32565b6004356122f2565b50346102175761121f36611f48565b828452600b60205260408420600201549192916001600160a01b031633036112df5761089792611250913691612000565b610d6d61128561125e6120a7565b9490549361126a612f44565b906112d46112cf6103e561127c6120a7565b97905494612f04565b956112ca602e60405180996d036b2ba30b230ba30a1a4a2101e960951b60208301526112ba8151809260208686019101612037565b810103600e81018a520188611fc4565b613369565b6130b6565b9360031b1c906130fa565b60405162461bcd60e51b815260206004820152601960248201527f51554144423a204e6f20696e7374616e636520616363657373000000000000006044820152606490fd5b503461021757604036600319011261021757602061134b611343611f32565b600435612959565b604051908152f35b50346102175760e0366003190112610217576001600160401b036044351161021757366023604435011215610217576001600160401b036044356004013511610217573660246044356004013560051b604435010111610217576084356001600160401b0381116109c4576113cc903690600401611eea565b60a4929192356001600160401b0381116109b5576113ee903690600401611eea565b939060c4356001600160401b0381116105305761140f903690600401611eea565b92906004358652600d60205260ff604087205416600781101561196257600561143891146122a6565b60405160208101906004358252888560408301376114686040828b81018b83820152036020810184520182611fc4565b51902092838752600d60205260ff604088205416600781101561194e5761089a578692604435600401356118b3575b6040516114a381611f8e565b6001600160a01b0385811680835260243560208085019182523360408087019182528b8f52600b909252908d20945185549085166001600160a01b031991821617865591516001860155516002909401805494909316931692909217905515801590806118a8575b1561182e5750848852600d60205260408820805460ff19166003179055611534856024356126b6565b848852600d60205260ff60408920541696600788101561181a57936115806103e5999a946115786117389561157060299661162f9a3691612000565b973691612000565b983691612000565b936115896120a7565b99905498611595612f44565b966115aa6115a16120a7565b9e90549b613369565b946115ec6103e56115e66115e06115da6115d46103e56115ce6103e5600435613369565b9a612d9c565b99612f04565b96612f04565b94612f04565b92612f73565b906115fb6103e5602435612d9c565b926116086103e533612f73565b946116176103e5606435612d9c565b9760206040519e8f8c83829e51948593019101612037565b8a0197600b60fa1b98896020820152611652825180936020602185019101612037565b0188602182015261166d825180936020602285019101612037565b01876022820152611688825180936020602385019101612037565b018660238201526116a3825180936020602485019101612037565b018560248201526116be825180936020602585019101612037565b018460258201526116d9825180936020602685019101612037565b018360268201526116f4825180936020602785019101612037565b0182602782015261170f825180936020602885019101612037565b019060288201526117298251809360208785019101612037565b01036009810185520183611fc4565b6040519060a08201938285106001600160401b038611176118045761089797610d6d95604052607884527f496e7374616e636549442c20696e7374616e63654f6653706163652c20696e7360208501527f74616e6365547970652c206d657461646174614349442c2049504e532c20495060408501527f4e53456e637279707465644b65792c206761746564436f6e74726163742c207060608501527f726963652c2063726561746f722c207468726573686f6c640000000000000000608085015260031b1c90612c7f565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b89526021600452602489fd5b808061189d575b156118635750848852600d60205260408820805460ff1916600117905561185e856024356126b6565b611534565b1561188457848852600d60205260408820805460ff19166002179055611534565b600d60205260408820805460ff19166004179055611534565b506024351515611835565b50602435151561150b565b92506118cb36604435600401356024604435016121a5565b61192988806118e48860018060a01b03600554166127d4565b9360405161191581611907602082019463a224cee760e01b86526024830161251a565b03601f198101835282611fc4565b519082865af1611923612766565b50612796565b9261194961194336604435600401356024604435016121a5565b86613273565b611497565b634e487b7160e01b88526021600452602488fd5b634e487b7160e01b87526021600452602487fd5b506020908160031936011261021757600435916119933384612959565b838352600782526119ac60026040852001543414612a23565b8383526007825260408320546001600160a01b03908116803b1561053057848091602460405180948193630684c62560e11b83523360048401525af1801561052557611b47575b50848452600783526001604085200154166063340234810460631434151715611b3357906064611a24920490612a7d565b62278d008101809111610d7757610d6d611b1a6108979495611a446120de565b959054946103e5611b29603f611a586131ee565b94611ab16103e5611a73611a6a6120de565b97905498612d9c565b986112ca6029604051809c68032b73239a0ba101e960bd1b88830152611aa1815180928a8686019101612037565b810103600981018d52018b611fc4565b90611abe6103e533612f73565b90604051998a936c024b739ba30b731b2a4a2101e9609d1b83860152611aed8151809285602d89019101612037565b8401917101020a7221039bab139b1b934b132b9101e960751b602d84015283519384918785019101612037565b0103601f810188520186611fc4565b60031b1c906130fa565b634e487b7160e01b85526011600452602485fd5b611b5390949194611f7b565b92386119f3565b50346102175760203660031901126102175760406060916004358152600b6020522060018060a01b0390818154169160026001830154920154169060405192835260208301526040820152f35b503461021757604036600319011261021757610897610d6d600435808452600b602052611be460018060a01b0360026040872001541633146124e2565b611bec6120a7565b92905491611bf8612f44565b90611c016120a7565b9290546112d46112cf6103e5611c1b6103e5602435612d9c565b956112ca602c60405180996b03a343932b9b437b632101e960a51b6020830152611c4e8151809260208686019101612037565b810103600c81018a520188611fc4565b503461021757608036600319011261021757611c78611f1c565b50611c81611f32565b506064356001600160401b0381116109c457611ca1903690600401611eea565b50507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611ce557604051630a85bd0160e11b8152602090f35b604051634a93b62160e11b8152600490fd5b5034610217576020366003190112610217576020906004358152600c8252604060018060a01b0391205416604051908152f35b5034610217576060366003190112610217576004356001600160401b0360243581811161052157611d5f903690600401611eea565b909160443590811161053057611d79903690600401611eea565b848652600c60209081526040872054909391906001600160a01b03163303611e955761089795611dbf610d6d94611db7602998611e85963691612000565b933691612000565b91611dfa611b29611dce61205a565b99905498611e5f6103e5611de061308b565b976112ca6031611e00611df161205a565b9a90549b612f04565b9c612f04565b9b6040519c8d916603730b6b2901e960cd1b89840152611e29815180928b602787019101612037565b8201690161030b137baba101e960b51b6027820152611e50825180938b8785019101612037565b0103601181018d52018b611fc4565b604051988268031b7b232a4a2101e960bd1b8b9485015282519283918686019101612037565b8101036009810188520186611fc4565b6040516306815cbd60e41b8152600490fd5b9050346109c457816003193601126109c4577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f84011215611f17578235916001600160401b038311611f175760208381860195010111611f1757565b600080fd5b600435906001600160a01b0382168203611f1757565b602435906001600160a01b0382168203611f1757565b906040600319830112611f175760043591602435906001600160401b038211611f1757611f7791600401611eea565b9091565b6001600160401b03811161180457604052565b606081019081106001600160401b0382111761180457604052565b604081019081106001600160401b0382111761180457604052565b90601f801991011681019081106001600160401b0382111761180457604052565b6001600160401b03811161180457601f01601f191660200190565b92919261200c82611fe5565b9161201a6040519384611fc4565b829481845281830111611f17578281602093846000960137010152565b60005b83811061204a5750506000910152565b818101518382015260200161203a565b600a546002101561209157600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa90600090565b634e487b7160e01b600052603260045260246000fd5b600a546001101561209157600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a990600090565b600a546003101561209157600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ab90600090565b600a546004101561209157600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ac90600090565b600a541561209157600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890600090565b9060209161219981518092818552858086019101612037565b601f01601f1916010190565b9092916001600160401b038411611804578360051b60405192602080946121ce82850182611fc4565b8097815201918101928311611f1757905b8282106121ec5750505050565b81356001600160a01b0381168103611f175781529083019083016121df565b906040600319830112611f175760043591602435906001600160401b038211611f175780602383011215611f175781602461224b936004013591016121a5565b90565b6000546001600160a01b0316330361226257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156122ad57565b60405162461bcd60e51b815260206004820152601c60248201527f51554144423a204e6f6465206973206e6f742061207375626e6f6465000000006044820152606490fd5b906000828152600b60205260018060a01b0360408220541690600d60205260ff60408220541660078110156123cb5760030361233357505061224b916129d5565b838152600d60205260ff60408220541660078110156123cb57600103612374575061235e90826128c7565b91821561236a57505090565b61224b92506129d5565b8392508093915052600d60205260ff6040832054166007811015610319576002149081156123a9575b501561224b5750600190565b825250600d602052604081205460ff1660078110156123cb576004143861239d565b634e487b7160e01b82526021600452602482fd5b919060008091848352600b60205260018060a01b038060408520541695600d60205260ff6040862054169360078510159788611962576003860361245a5750508452600b60205280600260408620015416911614935b6123cb5760048111908115612451575b5061244d5750565b9150565b90501538612445565b909750859392919397600186146000146124a9575061247990836128c7565b92831561248b575b505050935b612435565b8552600b602052604085206002015481169116149050388080612481565b97509250508395600284146000146124cc5750906124c6916128c7565b93612435565b9550505081600482036124865760019450612435565b156124e957565b60405162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b6044820152606490fd5b6020908160408183019282815285518094520193019160005b828110612541575050505090565b83516001600160a01b031685529381019392810192600101612533565b90805190602091828201908120906000908582526004855260409360ff8584208787518092855161259081848a612037565b82019081520301902054166126a5576125c091869188855260048352868520908751948593849251928391612037565b820190815203019020805460ff191660011790557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690813b156109b557829160a48392875195869384926305ef2c7f60e41b84528c60048501528960248501523060448501527f00000000000000000000000000000000000000000000000000000000000000001660648401528160848401525af190811561269a575061268b575b50815192830193845281830152815261268581611f8e565b51902090565b61269490611f7b565b3861266d565b8451903d90823e3d90fd5b845163cde9fa4b60e01b8152600490fd5b6006546001600160a01b0392600292916126d390829086166127d4565b9361270d600080604051602081019063189acdbd60e31b8252306024820152602481526126ff81611f8e565b5190828a5af1611923612766565b806040519561271b87611f8e565b1685526020850191338352604086019384526000526007602052806040600020955116906001600160601b0360a01b9182875416178655600186019251169082541617905551910155565b3d15612791573d9061277782611fe5565b916127856040519384611fc4565b82523d6000602084013e565b606090565b1561279d57565b60405162461bcd60e51b815260206004820152600f60248201526e6572726f72206465706c6f79696e6760881b6044820152606490fd5b6e5af43d82803e903d91602b57fd5bf390763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8260881c161760005260781b17602052603760096000f5906001600160a01b0382161561282a57565b60405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606490fd5b604390605592604051913060388401526f5af43d82803e903d91602b57fd5bf3ff60248401526014830152733d602d80600a3d3981f3363d3d373d3d3d363d73825260588201526037600c8201206078820152012090565b6000916001600160a01b039081169190826128e55750505050600090565b602460209260405194859384926370a0823160e01b84521660048301525afa91821561294d578092612919575b5050151590565b9091506020823d8211612945575b8161293460209383611fc4565b810103126102175750513880612912565b3d9150612927565b604051903d90823e3d90fd5b600090815260076020908152604080832054905163074288bd60e11b81526001600160a01b039485166004820152929383916024918391165afa91821561294d5780926129a557505090565b9091506020823d82116129cd575b816129c060209383611fc4565b8101031261021757505190565b3d91506129b3565b60009081526007602090815260408083205490516370a0823160e01b81526001600160a01b039485166004820152929383916024918391165afa91821561294d578092612919575050151590565b15612a2a57565b60405162461bcd60e51b815260206004820152602560248201527f51554144423a204e6f2070726963652073657420666f72207468697320696e7360448201526474616e636560d81b6064820152608490fd5b814710612b13576000918291829182916001600160a01b03165af1612aa0612766565b5015612aa857565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b602290612bc69294936040519582612b7a889451809260208088019101612037565b830190600b60fa1b91826020820152612b9d825180936020602185019101612037565b01906021820152612bb78251809360208785019101612037565b01036002810185520183611fc4565b565b90610d6d612c2f926103e5612bc695612bdf61214c565b9690549560405192612bf084611fa9565b600984526864625f73706163657360b81b6020850152610d25612c296103e5612c23612c1a61214c565b9990549a613369565b94613369565b91612f04565b9260405192612c3d84611f8e565b602984527f4442537061636549442c20444253756253706163654f6649442c20444253756260208501526853706163654e616d6560b81b604085015260031b1c905b92612c9060369261224b9495612d1f565b906040519485926b024a729a2a92a1024a72a27960a51b6020850152612cc0815180926020602c88019101612037565b8301600560fb1b602c820152612ce0825180936020602d85019101612037565b0167052ac8298aa8aa6560c31b602d820152612d06825180936020603585019101612037565b01602960f81b6035820152036016810184520182611fc4565b602261224b91612d37612d3146612d9c565b94612d9c565b6040519482612d50879451809260208088019101612037565b830190605f60f81b91826020820152612d73825180936020602185019101612037565b01906021820152612d8d8251809360208785019101612037565b01036002810184520182611fc4565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015612ef6575b506d04ee2d6d415b85acef810000000080831015612ee7575b50662386f26fc1000080831015612ed8575b506305f5e10080831015612ec9575b5061271080831015612eba575b506064821015612eaa575b600a80921015612ea0575b60019081602181860195612e3587611fe5565b96612e436040519889611fc4565b808852612e52601f1991611fe5565b01366020890137860101905b612e6a575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215612e9b57919082612e5e565b612e63565b9160010191612e22565b9190606460029104910191612e17565b60049193920491019138612e0c565b60089193920491019138612dff565b60109193920491019138612df0565b60209193920491019138612dde565b604093508104915038612dc5565b61224b60226040518093602760f81b90816020840152612f2e815180926020602187019101612037565b8201906021820152036002810184520182611fc4565b60405190612f5182611fa9565b601382527264625f7370616365735f696e7374616e63657360681b6020830152565b604051906001600160a01b0316612f8982611f8e565b602a82526020820160403682378251156120915760309053815160019081101561209157607860218401536029905b80821161300c575050612fc85790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613065576f181899199a1a9b1b9c1cb0b131b232b360811b901a61303b848661307a565b5360041c918015613050576000190190612fb8565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b908151811015612091570160200190565b6040519061309882611fa9565b600f82526e696e7374616e6365735f636f64657360881b6020830152565b90612bc6602d60405180946c024b739ba30b731b2a4a2101e9609d1b60208301526130ea8151809260208686019101612037565b810103600d810185520183611fc4565b9061310791939293612d1f565b9060405191602091828401928484106001600160401b038511176118045761224b94602c94604052600081529180516131a9575b5061319a6040519687946602aa82220aa22960cd1b84870152613167815180928660278a019101612037565b85016401029a2aa160dd1b602782015261318982518093868a85019101612037565b019183519384918785019101612037565b0103600c810184520182611fc4565b9091506131e760276040518093660102ba422a922960cd1b868301526131d781518092888686019101612037565b8101036007810184520182611fc4565b903861313b565b604051906131fb82611fa9565b600d82526c737562736372697074696f6e7360981b6020830152565b60001981146132265760010190565b634e487b7160e01b600052601160045260246000fd5b6040519061324982611fa9565b60078252666d656d6265727360c81b6020830152565b80518210156120915760209160051b010190565b61327f90929192613369565b9160005b81518110156133635761335e906104c061329b612115565b90546132a561323c565b916133566132b1612115565b90546003956132bf8d612f04565b916132d86103e58d6103de8d60018060a01b039261325f565b937124b739ba30b731b2a4a2161036b2b6b132b960711b604061333b81519788885161330c8160209b8c8086019101612037565b8101600b60fa1b8a82015282519061332c826021958d8785019101612037565b0103600181018a520188611fc4565b519461334686611fa9565b60128652850152881b1c90612c7f565b921b1c61348d565b613283565b50509050565b6040519061337682611f8e565b604082526020918281019160403684376040519061339382611fa9565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b8583015260005b8581106133f25750505061060f60f31b9261224b926133e260229360405196879485015251809285850190612037565b8101036002810184520182611fc4565b81811a9083518015613477576001600160f81b03199081906134169085048761307a565b51169060019383851b92848404600214851517156132265760001a61343b848a61307a565b53865180156134775761344f91068761307a565b51169281018091116132265761346c6134729360001a918761307a565b53613217565b6133b2565b634e487b7160e01b600052601260045260246000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691823b15611f17576134f69260009283604051809681958294631bbd786d60e11b84523060048501526024840152606060448401526064830190612180565b03925af18015613510576135075750565b612bc690611f7b565b6040513d6000823e3d90fdfea26469706673582212205102770fc264997c0b93fc5f9351733dddddcd4650c95a588047a432d6934d3164736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Create a decentralized Database NameSpaces Where space and subSpaces can get created and anyone can create instances inside a space and contribute to the public this is possible by integrating tableland SQL in solidity FNS system to support a decentralized Namespace of Database spaces IPNS and Push protocol for code and space discussions",
    "kind": "dev",
    "methods": {
      "createDBSpace(string)": {
        "details": "Create a new space under the given node",
        "params": {
          "_name": "The name of the new space"
        }
      },
      "createDBSubSpace(bytes32,string)": {
        "details": "Create a new subnode under the given node",
        "params": {
          "_DBSpace": "The parent node",
          "_name": "The name of the new subnode"
        }
      },
      "createInstanceCode(bytes32,string,string,string,string)": {
        "details": "Create a new instance under the given node",
        "params": {
          "_about": "The about of the new instance",
          "_codeIPNS": "The IPNS of the new instance",
          "_instance": "The parent node",
          "_name": "The name of the new instance"
        }
      },
      "createSpaceInstance(bytes32,uint256,address[],uint256,string,string,string)": {
        "details": "Create a new instance under the given node",
        "params": {
          "_IPNS": "The IPNS of the new instance",
          "_IPNSEncryptedKey": "The IPNSEncryptedKey of the new instance",
          "_members": "The hatID of the new instance",
          "_metadataCID": "The metadataCID of the new instance",
          "_node": "The parent node",
          "_threshold": "The threshold of the new instance"
        }
      },
      "hasViewAccess(bytes32,address)": {
        "details": "Check if the sender has access to the given instance",
        "params": {
          "_instance": "The instance to check",
          "_sender": "The sender to check"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "QUADB",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3586,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "QUADB_NODE",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 3588,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "BASE_NODE",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 3590,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "DOMAIN_ID",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3596,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "subNodes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 3868,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "gatedImplementation",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3870,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "subscriptionImplementation",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3886,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "instanceSubscription",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(SubscriptionStruct)3881_storage)"
      },
      {
        "astId": 4217,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "createTableStatements",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 4220,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "tables",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 4223,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "tableIDs",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3137,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "instances",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(SpaceInstance)3132_storage)"
      },
      {
        "astId": 3141,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "codeOwner",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3146,
        "contract": "contracts/QUADB.sol:QUADB",
        "label": "isType",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_enum(Types)3125)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGated)3866": {
        "encoding": "inplace",
        "label": "contract IGated",
        "numberOfBytes": "20"
      },
      "t_enum(Types)3125": {
        "encoding": "inplace",
        "label": "enum Core.Types",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_enum(Types)3125)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum Core.Types)",
        "numberOfBytes": "32",
        "value": "t_enum(Types)3125"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(SpaceInstance)3132_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Core.SpaceInstance)",
        "numberOfBytes": "32",
        "value": "t_struct(SpaceInstance)3132_storage"
      },
      "t_mapping(t_bytes32,t_struct(SubscriptionStruct)3881_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Gated.SubscriptionStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(SubscriptionStruct)3881_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SpaceInstance)3132_storage": {
        "encoding": "inplace",
        "label": "struct Core.SpaceInstance",
        "members": [
          {
            "astId": 3127,
            "contract": "contracts/QUADB.sol:QUADB",
            "label": "gatedContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3129,
            "contract": "contracts/QUADB.sol:QUADB",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3131,
            "contract": "contracts/QUADB.sol:QUADB",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(SubscriptionStruct)3881_storage": {
        "encoding": "inplace",
        "label": "struct Gated.SubscriptionStruct",
        "members": [
          {
            "astId": 3876,
            "contract": "contracts/QUADB.sol:QUADB",
            "label": "subscriptionContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IGated)3866"
          },
          {
            "astId": 3878,
            "contract": "contracts/QUADB.sol:QUADB",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3880,
            "contract": "contracts/QUADB.sol:QUADB",
            "label": "prize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
