{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@tableland/evm/contracts/interfaces/ITablelandTables.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\nimport {TablelandPolicy} from \"../TablelandPolicy.sol\";\n\n/**\n * @dev Interface of a TablelandTables compliant contract.\n */\ninterface ITablelandTables {\n    /**\n     * The caller is not authorized.\n     */\n    error Unauthorized();\n\n    /**\n     * RunSQL was called with a query length greater than maximum allowed.\n     */\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\n\n    /**\n     * @dev Emitted when `owner` creates a new table.\n     *\n     * owner - the to-be owner of the table\n     * tableId - the table id of the new table\n     * statement - the SQL statement used to create the table\n     */\n    event CreateTable(address owner, uint256 tableId, string statement);\n\n    /**\n     * @dev Emitted when a table is transferred from `from` to `to`.\n     *\n     * Not emmitted when a table is created.\n     * Also emitted after a table has been burned.\n     *\n     * from - the address that transfered the table\n     * to - the address that received the table\n     * tableId - the table id that was transferred\n     */\n    event TransferTable(address from, address to, uint256 tableId);\n\n    /**\n     * @dev Emitted when `caller` runs a SQL statement.\n     *\n     * caller - the address that is running the SQL statement\n     * isOwner - whether or not the caller is the table owner\n     * tableId - the id of the target table\n     * statement - the SQL statement to run\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\n     */\n    event RunSQL(\n        address caller,\n        bool isOwner,\n        uint256 tableId,\n        string statement,\n        TablelandPolicy policy\n    );\n\n    /**\n     * @dev Emitted when a table's controller is set.\n     *\n     * tableId - the id of the target table\n     * controller - the address of the controller (EOA or contract)\n     */\n    event SetController(uint256 tableId, address controller);\n\n    /**\n     * @dev Struct containing parameters needed to run a mutating sql statement\n     *\n     * tableId - the id of the target table\n     * statement - the SQL statement to run\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\n     *\n     */\n    struct Statement {\n        uint256 tableId;\n        string statement;\n    }\n\n    /**\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\n     *\n     * owner - the to-be owner of the new table\n     * statement - the SQL statement used to create the table\n     *           - the statement type must be CREATE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     */\n    function create(\n        address owner,\n        string memory statement\n    ) external payable returns (uint256);\n\n    /**\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\n     *\n     * owner - the to-be owner of the new table\n     * statements - the SQL statements used to create the tables\n     *            - each statement type must be CREATE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     */\n    function create(\n        address owner,\n        string[] calldata statements\n    ) external payable returns (uint256[] memory);\n\n    /**\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\n     *\n     * caller - the address that is running the SQL statement\n     * tableId - the id of the target table\n     * statement - the SQL statement to run\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller`\n     * - `tableId` must exist and be the table being mutated\n     * - `caller` must be authorized by the table controller\n     * - `statement` must be less than or equal to 35000 bytes\n     */\n    function mutate(\n        address caller,\n        uint256 tableId,\n        string calldata statement\n    ) external payable;\n\n    /**\n     * @dev Runs an array of mutating SQL statements for `caller`\n     *\n     * caller - the address that is running the SQL statement\n     * statements - an array of structs containing the id of the target table and coresponding statement\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller`\n     * - `tableId` must be the table being muated in each struct's statement\n     * - `caller` must be authorized by the table controller if the statement is mutating\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\n     */\n    function mutate(\n        address caller,\n        ITablelandTables.Statement[] calldata statements\n    ) external payable;\n\n    /**\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\n     *\n     * When a table is created, it's controller is set to the zero address, which means that the\n     * contract will not enforce write access control. In this situation, validators will not accept\n     * transactions from non-owners unless explicitly granted access with \"GRANT\" SQL statements.\n     *\n     * When a controller address is set for a table, validators assume write access control is\n     * handled at the contract level, and will accept all transactions.\n     *\n     * You can unset a controller address for a table by setting it back to the zero address.\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\n     *\n     * caller - the address that is setting the controller\n     * tableId - the id of the target table\n     * controller - the address of the controller (EOA or contract)\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller` and owner of `tableId`\n     * - `tableId` must exist\n     * - `tableId` controller must not be locked\n     */\n    function setController(\n        address caller,\n        uint256 tableId,\n        address controller\n    ) external;\n\n    /**\n     * @dev Returns the controller for a table.\n     *\n     * tableId - the id of the target table\n     */\n    function getController(uint256 tableId) external returns (address);\n\n    /**\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\n     *\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\n     *\n     * caller - the address that is locking the controller\n     * tableId - the id of the target table\n     *\n     * Requirements:\n     *\n     * - contract must be unpaused\n     * - `msg.sender` must be `caller` and owner of `tableId`\n     * - `tableId` must exist\n     * - `tableId` controller must not be locked\n     */\n    function lockController(address caller, uint256 tableId) external;\n\n    /**\n     * @dev Sets the contract base URI.\n     *\n     * baseURI - the new base URI\n     *\n     * Requirements:\n     *\n     * - `msg.sender` must be contract owner\n     */\n    function setBaseURI(string memory baseURI) external;\n\n    /**\n     * @dev Pauses the contract.\n     *\n     * Requirements:\n     *\n     * - `msg.sender` must be contract owner\n     * - contract must be unpaused\n     */\n    function pause() external;\n\n    /**\n     * @dev Unpauses the contract.\n     *\n     * Requirements:\n     *\n     * - `msg.sender` must be contract owner\n     * - contract must be paused\n     */\n    function unpause() external;\n}\n"
    },
    "@tableland/evm/contracts/TablelandPolicy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\n/**\n * @dev Object defining how a table can be accessed.\n */\nstruct TablelandPolicy {\n    // Whether or not the table should allow SQL INSERT statements.\n    bool allowInsert;\n    // Whether or not the table should allow SQL UPDATE statements.\n    bool allowUpdate;\n    // Whether or not the table should allow SQL DELETE statements.\n    bool allowDelete;\n    // A conditional clause used with SQL UPDATE and DELETE statements.\n    // For example, a value of \"foo > 0\" will concatenate all SQL UPDATE\n    // and/or DELETE statements with \"WHERE foo > 0\".\n    // This can be useful for limiting how a table can be modified.\n    // Use {Policies-joinClauses} to include more than one condition.\n    string whereClause;\n    // A conditional clause used with SQL INSERT statements.\n    // For example, a value of \"foo > 0\" will concatenate all SQL INSERT\n    // statements with a check on the incoming data, i.e., \"CHECK (foo > 0)\".\n    // This can be useful for limiting how table data ban be added.\n    // Use {Policies-joinClauses} to include more than one condition.\n    string withCheck;\n    // A list of SQL column names that can be updated.\n    string[] updatableColumns;\n}\n"
    },
    "@tableland/evm/contracts/utils/SQLHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @dev Library of helpers for generating SQL statements from common parameters.\n */\nlibrary SQLHelpers {\n    /**\n     * @dev Generates a properly formatted table name from a prefix and table id.\n     *\n     * prefix - the user generated table prefix as a string\n     * tableId - the Tableland generated tableId as a uint256\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toNameFromId(\n        string memory prefix,\n        uint256 tableId\n    ) internal view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    prefix,\n                    \"_\",\n                    Strings.toString(block.chainid),\n                    \"_\",\n                    Strings.toString(tableId)\n                )\n            );\n    }\n\n    /**\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\n     *\n     * schema - a comma seperated string indicating the desired prefix. Example: \"int id, text name\"\n     * prefix - the user generated table prefix as a string\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toCreateFromSchema(\n        string memory schema,\n        string memory prefix\n    ) internal view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"CREATE TABLE \",\n                    prefix,\n                    \"_\",\n                    Strings.toString(block.chainid),\n                    \"(\",\n                    schema,\n                    \")\"\n                )\n            );\n    }\n\n    /**\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\n     *\n     * prefix - the user generated table prefix as a string.\n     * tableId - the Tableland generated tableId as a uint256.\n     * columns - a string encoded ordered list of columns that will be updated. Example: \"name, age\".\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \"'jerry', 24\". Values order must match column order.\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toInsert(\n        string memory prefix,\n        uint256 tableId,\n        string memory columns,\n        string memory values\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        return\n            string(\n                abi.encodePacked(\n                    \"INSERT INTO \",\n                    name,\n                    \"(\",\n                    columns,\n                    \")VALUES(\",\n                    values,\n                    \")\"\n                )\n            );\n    }\n\n    /**\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\n     *\n     * prefix - the user generated table prefix as a string.\n     * tableId - the Tableland generated tableId as a uint256.\n     * columns - a string encoded ordered list of columns that will be updated. Example: \"name, age\".\n     * values - an array where each item is a string encoded ordered list of values.\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toBatchInsert(\n        string memory prefix,\n        uint256 tableId,\n        string memory columns,\n        string[] memory values\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        string memory insert = string(\n            abi.encodePacked(\"INSERT INTO \", name, \"(\", columns, \")VALUES\")\n        );\n        for (uint256 i = 0; i < values.length; i++) {\n            if (i == 0) {\n                insert = string(abi.encodePacked(insert, \"(\", values[i], \")\"));\n            } else {\n                insert = string(abi.encodePacked(insert, \",(\", values[i], \")\"));\n            }\n        }\n        return insert;\n    }\n\n    /**\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\n     *\n     * prefix - the user generated table prefix as a string\n     * tableId - the Tableland generated tableId as a uint256\n     * setters - a string encoded set of updates. Example: \"name='tom', age=26\"\n     * filters - a string encoded list of filters or \"\" for no filters. Example: \"id<2 and name!='jerry'\"\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toUpdate(\n        string memory prefix,\n        uint256 tableId,\n        string memory setters,\n        string memory filters\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        string memory filter = \"\";\n        if (bytes(filters).length > 0) {\n            filter = string(abi.encodePacked(\" WHERE \", filters));\n        }\n        return\n            string(abi.encodePacked(\"UPDATE \", name, \" SET \", setters, filter));\n    }\n\n    /**\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\n     *\n     * prefix - the user generated table prefix as a string.\n     * tableId - the Tableland generated tableId as a uint256.\n     * filters - a string encoded list of filters. Example: \"id<2 and name!='jerry'\".\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function toDelete(\n        string memory prefix,\n        uint256 tableId,\n        string memory filters\n    ) internal view returns (string memory) {\n        string memory name = toNameFromId(prefix, tableId);\n        return\n            string(abi.encodePacked(\"DELETE FROM \", name, \" WHERE \", filters));\n    }\n\n    /**\n     * @dev Add single quotes around a string value\n     *\n     * input - any input value.\n     *\n     */\n    function quote(string memory input) internal pure returns (string memory) {\n        return string(abi.encodePacked(\"'\", input, \"'\"));\n    }\n}\n"
    },
    "@tableland/evm/contracts/utils/TablelandDeployments.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.10 <0.9.0;\n\nimport {ITablelandTables} from \"../interfaces/ITablelandTables.sol\";\nimport {IERC721AUpgradeable} from \"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\";\n\ninterface TablelandTablesImpl is ITablelandTables, IERC721AUpgradeable {}\n\n/**\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\n */\nlibrary TablelandDeployments {\n    /**\n     * Current chain does not have a TablelandTables deployment.\n     */\n    error ChainNotSupported(uint256 chainid);\n\n    // TablelandTables address on Ethereum.\n    address internal constant MAINNET =\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\n    // TablelandTables address on Ethereum.\n    address internal constant HOMESTEAD = MAINNET;\n    // TablelandTables address on Optimism.\n    address internal constant OPTIMISM =\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\n    // TablelandTables address on Arbitrum One.\n    address internal constant ARBITRUM =\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\n    // TablelandTables address on Arbitrum Nova.\n    address internal constant ARBITRUM_NOVA =\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\n    // TablelandTables address on Polygon.\n    address internal constant MATIC =\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\n    // TablelandTables address on Filecoin.\n    address internal constant FILECOIN =\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\n\n    // TablelandTables address on Ethereum Sepolia.\n    address internal constant SEPOLIA =\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\n    // TablelandTables address on Optimism Goerli.\n    address internal constant OPTIMISM_GOERLI =\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\n    // TablelandTables address on Arbitrum Sepolia.\n    address internal constant ARBITRUM_SEPOLIA =\n        0x223A74B8323914afDC3ff1e5005564dC17231d6e;\n    // TablelandTables address on Polygon Mumbai.\n    address internal constant MATICMUM =\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\n    // TablelandTables address on Filecoin Calibration.\n    address internal constant FILECOIN_CALIBRATION =\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\n\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/tableland-js/tree/main/packages/local.\n    address internal constant LOCAL_TABLELAND =\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\n\n    /**\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\n     *\n     * The selection order is meant to reduce gas on more expensive chains.\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function get() internal view returns (TablelandTablesImpl) {\n        if (block.chainid == 1) {\n            return TablelandTablesImpl(MAINNET);\n        } else if (block.chainid == 10) {\n            return TablelandTablesImpl(OPTIMISM);\n        } else if (block.chainid == 42161) {\n            return TablelandTablesImpl(ARBITRUM);\n        } else if (block.chainid == 42170) {\n            return TablelandTablesImpl(ARBITRUM_NOVA);\n        } else if (block.chainid == 137) {\n            return TablelandTablesImpl(MATIC);\n        } else if (block.chainid == 314) {\n            return TablelandTablesImpl(FILECOIN);\n        } else if (block.chainid == 11155111) {\n            return TablelandTablesImpl(SEPOLIA);\n        } else if (block.chainid == 420) {\n            return TablelandTablesImpl(OPTIMISM_GOERLI);\n        } else if (block.chainid == 421614) {\n            return TablelandTablesImpl(ARBITRUM_SEPOLIA);\n        } else if (block.chainid == 80001) {\n            return TablelandTablesImpl(MATICMUM);\n        } else if (block.chainid == 314159) {\n            return TablelandTablesImpl(FILECOIN_CALIBRATION);\n        } else if (block.chainid == 31337) {\n            return TablelandTablesImpl(LOCAL_TABLELAND);\n        } else {\n            revert ChainNotSupported(block.chainid);\n        }\n    }\n\n    /**\n     * @dev Returns the Tableland gateway base URI for the currently executing EVM chain.\n     *\n     * The selection order is meant to reduce gas on more expensive chains.\n     *\n     * Requirements:\n     *\n     * - block.chainid must refer to a supported chain.\n     */\n    function getBaseURI() internal view returns (string memory) {\n        if (block.chainid == 1) {\n            return \"https://tableland.network/api/v1/\";\n        } else if (block.chainid == 10) {\n            return \"https://tableland.network/api/v1/\";\n        } else if (block.chainid == 42161) {\n            return \"https://tableland.network/api/v1/\";\n        } else if (block.chainid == 42170) {\n            return \"https://tableland.network/api/v1/\";\n        } else if (block.chainid == 137) {\n            return \"https://tableland.network/api/v1/\";\n        } else if (block.chainid == 314) {\n            return \"https://tableland.network/api/v1/\";\n        } else if (block.chainid == 11155111) {\n            return \"https://testnets.tableland.network/api/v1/\";\n        } else if (block.chainid == 420) {\n            return \"https://testnets.tableland.network/api/v1/\";\n        } else if (block.chainid == 421613) {\n            return \"https://testnets.tableland.network/api/v1/\";\n        } else if (block.chainid == 80001) {\n            return \"https://testnets.tableland.network/api/v1/\";\n        } else if (block.chainid == 314159) {\n            return \"https://testnets.tableland.network/api/v1/\";\n        } else if (block.chainid == 31337) {\n            return \"http://localhost:8080/api/v1/\";\n        } else {\n            revert ChainNotSupported(block.chainid);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IENSResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IFNSResolver {\n    /**\n     * Sets the text data associated with an ENS node and key.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param key The key to set.\n     * @param value The text data value to set.\n     */\n    function setText(\n        bytes32 node,\n        string calldata key,\n        string calldata value\n    ) external;\n\n    /**\n     * Sets the address associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param node The node to update.\n     * @param a The address to set.\n     */\n    function setAddr(bytes32 node, address a) external;\n\n    /**\n     * Returns the text data associated with an ENS node and key.\n     * @param node The ENS node to query.\n     * @param key The text data key to query.\n     * @return The associated text data.\n     */\n    function text(\n        bytes32 node,\n        string calldata key\n    ) external view returns (string memory);\n}\n\ninterface IFNS {\n    function setSubnodeRecord(\n        bytes32 node,\n        bytes32 label,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n}\n\ninterface IFNSRegistrar {\n    function reclaim(uint256 id, address _owner) external;\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n}"
    },
    "contracts/libraries/Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {FNS} from \"./FNS.sol\";\n\nimport {Gated, IGated} from \"./Gated.sol\";\n\nimport {Tableland} from \"./Tableland.sol\";\n\n/**\n * @title Core\n * @dev Interface for the Ens system to support a decentralized Namespace of Database spaces\n * IPNS for dynamic code and space updates\n * Tableland SQL in solidity for the databases and subspaces\n */\n\nabstract contract Core is FNS, Gated, Tableland {\n    \n    enum Types {\n        NULL,\n        PAID_PRIVATE_INSTANCE,\n        OPEN_PRIVATE_INSTANCE,\n        PAID_INSTANCE,\n        OPEN_INSTANCE,\n        SUBNODE,\n        CODE\n    }\n\n    struct SpaceInstance {\n        address gatedContract;\n        uint256 price;\n        address creator;\n    }\n\n    mapping(bytes32 => SpaceInstance) public instances;\n\n    mapping(bytes32 => address) public codeOwner;\n\n    mapping(bytes32 => Types) public isType;\n\n    error NoCodeOwner();\n\n    error InstanceAlreadyExists();\n\n    constructor(\n        address _registry,\n        address _registrar,\n        address _publicResolver,\n        bytes32 _baseNode,\n        address _gatedImplementation,\n        address _subscriptionImplementation\n    )\n        FNS(_registry, _registrar, _publicResolver, _baseNode)\n        Gated(_gatedImplementation, _subscriptionImplementation)\n        Tableland()\n    {}\n\n    /**\n     * @dev createInstanceType\n     * @param _newDBInstance The new instance\n     * @param _gatedContract The gatedContract of the new instance\n     * @param _price The price of the new instance\n     */\n    function createInstanceType(\n        bytes32 _newDBInstance,\n        address _gatedContract,\n        uint _price\n    ) internal {\n        bool _isPrivate = _gatedContract != address(0);\n        if (!_isPrivate && _price > 0) {\n            isType[_newDBInstance] = Types.PAID_INSTANCE;\n            createSubscription(_price, _newDBInstance);\n        } else if (_isPrivate && _price > 0) {\n            isType[_newDBInstance] = Types.PAID_PRIVATE_INSTANCE;\n            createSubscription(_price, _newDBInstance);\n        } else if (_isPrivate) {\n            isType[_newDBInstance] = Types.OPEN_PRIVATE_INSTANCE;\n        } else {\n            isType[_newDBInstance] = Types.OPEN_INSTANCE;\n        }\n    }\n\n    /**\n     * @dev Check if the sender has access to the given instance\n     * @param _instance The instance to check\n     * @param _sender The sender to check\n     * @return bool\n     */\n    function hasViewAccess(\n        bytes32 _instance,\n        address _sender\n    ) public view returns (bool) {\n        address _gatedAddress = instances[_instance].gatedContract;\n        if (isType[_instance] == Types.PAID_INSTANCE) {\n            return hasActiveSubscription(_instance, _sender);\n        } else if (isType[_instance] == Types.PAID_PRIVATE_INSTANCE) {\n            return\n                getAccess(_sender, _gatedAddress) ||\n                hasActiveSubscription(_instance, _sender);\n        } else if (\n            isType[_instance] == Types.OPEN_PRIVATE_INSTANCE ||\n            isType[_instance] == Types.OPEN_INSTANCE\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function hasMutateAccess(\n        bytes32 _instance,\n        address _sender\n    ) public view returns (bool access) {\n        address _gatedAddress = instances[_instance].gatedContract;\n        Types _instanceType = isType[_instance];\n        if (_instanceType == Types.PAID_INSTANCE) {\n            access = instances[_instance].creator == _sender;\n        } else if (_instanceType == Types.PAID_PRIVATE_INSTANCE) {\n            access =\n                getAccess(_sender, _gatedAddress) ||\n                instances[_instance].creator == _sender;\n        } else if (_instanceType == Types.OPEN_PRIVATE_INSTANCE) {\n            access = getAccess(_sender, _gatedAddress);\n        } else if (_instanceType == Types.OPEN_INSTANCE) {\n            access = true;\n        }\n        uint8 _isType = uint8(_instanceType);\n        if (_isType > 4 || _instanceType == Types.NULL) {\n            access = false;\n        }\n    }\n\n    function insertNewMembers(\n        bytes32 _instance,\n        address[] memory _members\n    ) external {\n        address _gatedAddress = instances[_instance].gatedContract;\n        address _owner = instances[_instance].creator;\n        require(_owner == msg.sender, \"No access\");\n        if (_gatedAddress != address(0)) {\n            IGated(_gatedAddress).mint(_members);\n        }\n        _insertMembers(_instance, _members);\n    }\n\n    function removeMembers(\n        bytes32 _instance,\n        address[] memory _members\n    ) external {\n        address _gatedAddress = instances[_instance].gatedContract;\n        address _owner = instances[_instance].creator;\n        require(_owner == msg.sender, \"No access\");\n        if (_gatedAddress != address(0)) {\n            IGated(_gatedAddress).burn(_members);\n        }\n        _removeMembers(_instance, _members);\n    }\n}"
    },
    "contracts/libraries/FNS.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IFNSResolver, IFNS, IFNSRegistrar} from \"../interfaces/IENSResolver.sol\";\n\n/**\n * @title FNS\n * @dev Interface for the FNS system to support a decentralized Namespace of Database spaces\n * IPNS and Push protocol for code and space discussions\n * Tableland SQL in solidity for the databases and subspaces\n */\n\nabstract contract FNS is IERC721Receiver, Ownable {\n    IFNS public immutable REGISTRY;\n    IFNSRegistrar public immutable REGISTRAR;\n    IFNSResolver public immutable PUBLIC_RESOLVER;\n\n    bytes32 public QUADB_NODE;\n    bytes32 private immutable BASE_NODE;\n    uint256 public DOMAIN_ID;\n\n    error NoInstanceAccess();\n    error InvalidTokenAmount();\n    error InvalidTokenSender();\n\n    constructor(\n        address _registry,\n        address _registrar,\n        address _publicResolver,\n        bytes32 _baseNode\n    ) {\n        REGISTRY = IFNS(_registry);\n        REGISTRAR = IFNSRegistrar(_registrar);\n        PUBLIC_RESOLVER = IFNSResolver(_publicResolver);\n        BASE_NODE = _baseNode;\n    }\n\n    /*\n     * @dev Function to create a new subnode.\n     * @param {bytes32} node - Parent node.\n     * @param {string} subNode - Subnode name.\n     * @return {bytes32} - New subnode.\n     */\n    function createSubNode(\n        bytes32 parentNode,\n        string memory subNode\n    ) internal returns (bytes32 newSubNode) {\n        bytes32 label = keccak256(bytes(subNode));\n\n        REGISTRY.setSubnodeRecord(\n            // Gaming character subnode\n            parentNode,\n            // Character tokenID as sub.subdomain to the gaming character subdomain\n            label,\n            // Owner\n            address(this),\n            // Resolver\n            address(PUBLIC_RESOLVER),\n            // TTL\n            0\n        );\n\n        newSubNode = _makeNode(parentNode, label);\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256 tokenId,\n        bytes calldata\n    ) external returns (bytes4) {\n        if (msg.sender != address(REGISTRAR)) {\n            revert InvalidTokenSender();\n        }\n\n        if (QUADB_NODE == bytes32(0)) {\n            DOMAIN_ID = tokenId;\n            QUADB_NODE = _makeNode(BASE_NODE, bytes32(tokenId));\n        }\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    function _makeNode(\n        bytes32 node,\n        bytes32 labelhash\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(node, labelhash));\n    }\n\n    function transferDomainOwnership(\n        address newOwner\n    ) external onlyOwner{\n        REGISTRAR.safeTransferFrom(address(this), newOwner, DOMAIN_ID);\n        QUADB_NODE = bytes32(0);\n    }\n}"
    },
    "contracts/libraries/Gated.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\ninterface IGated {\n    function mint(address[] memory newMembers) external;\n\n    function burn(address[] memory _members) external;\n\n    function getRemainingTime(address owner) external view returns (uint256);\n\n    function subscribe(address newMember) external;\n\n    function extendSubscription(address member) external;\n\n    function balanceOf(address owner) external view returns (uint256);\n}\n\nabstract contract Gated {\n    address internal gatedImplementation;\n    address internal subscriptionImplementation;\n    uint256 internal constant MONTH = 30 days;\n\n    struct SubscriptionStruct {\n        IGated subscriptionContract;\n        address creator;\n        uint256 prize;\n    }\n\n    mapping(bytes32 => SubscriptionStruct) public instanceSubscription;\n\n    // Constructor\n    constructor(\n        address _gatedImplementation,\n        address _subscriptionImplementation\n    ) {\n        gatedImplementation = _gatedImplementation;\n        subscriptionImplementation = _subscriptionImplementation;\n    }\n\n    function createSubscription(uint _keyPrice, bytes32 _instanceID) internal {\n        instanceSubscription[_instanceID] = SubscriptionStruct({\n            subscriptionContract: IGated(\n                creatSubscriptionContract(_instanceID)\n            ),\n            creator: msg.sender,\n            prize: _keyPrice\n        });\n    }\n\n    // Function to create a new OptimisticResolver contract and associate it with a schema\n    function createGatedContract(\n        address[] memory _members,\n        bytes32 salt\n    ) internal returns (address accessControlClone) {\n        // Create new resolver contract\n        accessControlClone = Clones.cloneDeterministic(\n            gatedImplementation,\n            salt\n        );\n\n        (bool success, ) = accessControlClone.call(\n            abi.encodeWithSignature(\"initialize(address[])\", _members)\n        );\n\n        require(success, \"error deploying\");\n    }\n\n    // Function to create a new OptimisticResolver contract and associate it with a schema\n    function creatSubscriptionContract(\n        bytes32 salt\n    ) internal returns (address accessControlClone) {\n        // Create new resolver contract\n        accessControlClone = Clones.cloneDeterministic(\n            subscriptionImplementation,\n            salt\n        );\n\n        (bool success, ) = accessControlClone.call(\n            abi.encodeWithSignature(\"initialize(address)\", address(this))\n        );\n\n        require(success, \"error deploying\");\n    }\n\n    function getDeterministicAddress(\n        bytes32 _salt\n    ) public view returns (address) {\n        return Clones.predictDeterministicAddress(gatedImplementation, _salt);\n    }\n\n    function getSuscriptionDeterministicAddress(\n        bytes32 _salt\n    ) public view returns (address) {\n        return\n            Clones.predictDeterministicAddress(\n                subscriptionImplementation,\n                _salt\n            );\n    }\n\n    function getAccess(\n        address _sender,\n        address _gatedContract\n    ) public view returns (bool) {\n        return\n            _gatedContract == address(0)\n                ? false\n                : IERC721(_gatedContract).balanceOf(_sender) > 0;\n    }\n\n    function getRemainingSubscriptionTime(\n        bytes32 _instanceID,\n        address _owner\n    ) public view returns (uint256) {\n        return\n            instanceSubscription[_instanceID]\n                .subscriptionContract\n                .getRemainingTime(_owner);\n    }\n\n    function hasActiveSubscription(\n        bytes32 _instanceID,\n        address _subscriber\n    ) public view returns (bool) {\n        return\n            instanceSubscription[_instanceID].subscriptionContract.balanceOf(\n                _subscriber\n            ) > 0;\n    }\n\n    /**\n     * @dev PurchaseSubscription function for an agentID\n     * @param _instanceID to subscribe\n     */\n    function purchaseSubscription(bytes32 _instanceID) internal {\n        uint256 _priceToPay = instanceSubscription[_instanceID].prize;\n        require(\n            _priceToPay == msg.value,\n            \"QUADB: No price set for this instance\"\n        );\n\n        instanceSubscription[_instanceID].subscriptionContract.subscribe(\n            msg.sender\n        );\n\n        Address.sendValue(\n            payable(instanceSubscription[_instanceID].creator),\n            (msg.value * 99) / 100\n        );\n    }\n\n    function extendSubscription(bytes32 _instanceID) internal {\n        uint256 _priceToPay = instanceSubscription[_instanceID].prize;\n\n        require(\n            _priceToPay == msg.value,\n            \"QUADB: No price set for this instance\"\n        );\n\n        instanceSubscription[_instanceID]\n            .subscriptionContract\n            .extendSubscription(msg.sender);\n\n        Address.sendValue(\n            payable(instanceSubscription[_instanceID].creator),\n            (msg.value * 99) / 100\n        );\n    }\n\n    function getTime() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    // Function to receive Ethers\n    receive() external payable {}\n}\n"
    },
    "contracts/libraries/Tableland.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {TablelandDeployments} from \"@tableland/evm/contracts/utils/TablelandDeployments.sol\";\n\nimport {ITablelandTables} from \"@tableland/evm/contracts/interfaces/ITablelandTables.sol\";\n\nimport {SQLHelpers} from \"@tableland/evm/contracts/utils/SQLHelpers.sol\";\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nabstract contract Tableland {\n    ITablelandTables public immutable TABLELAND;\n\n    string[] internal createTableStatements;\n\n    string[] public tables;\n\n    uint256[] public tableIDs;\n\n    string internal constant DBSPACES_TABLE_PREFIX = \"db_spaces\";\n\n    string internal constant DBSPACES_SCHEMA =\n        \"DBSpaceID text, DBSubSpaceOfID text, DBSubSpaceName text\";\n\n    string internal constant DBSPACES_INSTANCES_TABLE_PREFIX =\n        \"db_spaces_instances\";\n\n    string internal constant DBSPACES_INSTANCES_SCHEMA =\n        \"InstanceID text, instanceOfSpace text, instanceType text, metadataCID text, chatID text, IPNS text, IPNSEncryptedKey text, gatedContract text, price text, creator text\";\n\n    string internal constant DB_INSTANCES_CODES_TABLE_PREFIX =\n        \"instances_codes\";\n\n    string internal constant DB_INSTANCES_CODES_SCHEMA =\n        \"InstanceID text, codeID text, name text, about text, chatID text, IPNS text, IPNSEncryptedKey text, creator text\";\n\n    string internal constant SUBSCRIPTIONS_TABLE_PREFIX = \"subscriptions\";\n\n    string internal constant SUBSCRIPTIONS_SCHEMA =\n        \"InstanceID text, subscriber text, endsAt text\";\n\n    string internal constant DB_INSTANCES_MEMBERS_TABLE_PREFIX = \"members\";\n\n    string internal constant DB_INSTANCES_MEMBERS_SCHEMA =\n        \"InstanceID text, member text\";\n\n    constructor() {\n        TABLELAND = TablelandDeployments.get();\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                DBSPACES_SCHEMA,\n                DBSPACES_TABLE_PREFIX\n            )\n        );\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                DBSPACES_INSTANCES_SCHEMA,\n                DBSPACES_INSTANCES_TABLE_PREFIX\n            )\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                DB_INSTANCES_CODES_SCHEMA,\n                DB_INSTANCES_CODES_TABLE_PREFIX\n            )\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                SUBSCRIPTIONS_SCHEMA,\n                SUBSCRIPTIONS_TABLE_PREFIX\n            )\n        );\n\n        createTableStatements.push(\n            SQLHelpers.toCreateFromSchema(\n                DB_INSTANCES_MEMBERS_SCHEMA,\n                DB_INSTANCES_MEMBERS_TABLE_PREFIX\n            )\n        );\n\n        tableIDs = TABLELAND.create(address(this), createTableStatements);\n\n        tables.push(\n            SQLHelpers.toNameFromId(DBSPACES_TABLE_PREFIX, tableIDs[0])\n        );\n        tables.push(\n            SQLHelpers.toNameFromId(\n                DBSPACES_INSTANCES_TABLE_PREFIX,\n                tableIDs[1]\n            )\n        );\n        tables.push(\n            SQLHelpers.toNameFromId(\n                DB_INSTANCES_CODES_TABLE_PREFIX,\n                tableIDs[2]\n            )\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(SUBSCRIPTIONS_TABLE_PREFIX, tableIDs[3])\n        );\n\n        tables.push(\n            SQLHelpers.toNameFromId(\n                DB_INSTANCES_MEMBERS_TABLE_PREFIX,\n                tableIDs[4]\n            )\n        );\n    }\n\n    /*\n     * @dev Internal function to insert a new space.\n     * @param {bytes32} DBSpaceID - DBSpace ID.\n     * @param {bytes32} DBSubSpaceOfID - DBSubSpaceOf ID.\n     * @param {string} DBSpaceName - Name of the space.\n     * @param {string} DBSubSpaceOfName - Name of the sub space.\n     */\n\n    function spaceInsertion(\n        bytes32 DBSpaceID,\n        bytes32 DBSubSpaceOfID,\n        string memory DBSubSpaceName\n    ) internal {\n        mutate(\n            tableIDs[0],\n            SQLHelpers.toInsert(\n                DBSPACES_TABLE_PREFIX,\n                tableIDs[0],\n                \"DBSpaceID, DBSubSpaceOfID, DBSubSpaceName\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(DBSpaceID)),\n                    \",\",\n                    SQLHelpers.quote(bytes32ToString(DBSubSpaceOfID)),\n                    \",\",\n                    SQLHelpers.quote(DBSubSpaceName)\n                )\n            )\n        );\n    }\n\n    /*\n     * @dev Internal function to insert a new instance.\n     * @param {bytes32} InstanceID - Instance ID.\n     * @param {bytes32} instanceOfSpace - DBSpace ID.\n     * @param {string} name - Name of the instance.\n     * @param {string} about - About of the instance.\n     * @param {string} img - Image of the instance.\n     * @param {string} chatID - Chat ID of the instance.\n     * @param {string} IPNS - IPNS of the instance.\n     * @param {string} IPNSEncryptedKey - Creator of the instance.\n     */\n\n    function instanceInsertion(\n        bytes32 _instanceID,\n        uint8 _lockType,\n        bytes32 _instanceOfSpace,\n        address _gatedContract,\n        uint256 price,\n        string memory metadataCID,\n        string memory chatID,\n        string memory IPNS,\n        string memory IPNSEncryptedKey\n    ) internal {\n        mutate(\n            tableIDs[1],\n            SQLHelpers.toInsert(\n                DBSPACES_INSTANCES_TABLE_PREFIX,\n                tableIDs[1],\n                \"InstanceID, instanceOfSpace, instanceType, metadataCID, chatID, IPNS, IPNSEncryptedKey, gatedContract, price, creator\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(_instanceID)),\n                    \",\",\n                    SQLHelpers.quote(bytes32ToString(_instanceOfSpace)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toString(_lockType)),\n                    \",\",\n                    SQLHelpers.quote(metadataCID),\n                    \",\",\n                    SQLHelpers.quote(chatID),\n                    \",\",\n                    SQLHelpers.quote(IPNS),\n                    \",\",\n                    SQLHelpers.quote(IPNSEncryptedKey),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(_gatedContract)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toString(price)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(msg.sender))\n                )\n            )\n        );\n    }\n\n    /*\n     * @dev Internal function to insert a new instance code.\n     * @param {bytes32} InstanceID - Instance ID.\n     * @param {string} name - Name of the instance code.\n     * @param {string} about - About of the instance code.\n     * @param {string} chatID - Chat ID of the instance code.\n     * @param {string} codeIPNS - IPNS of the instance code.\n     * @param {string} IPNSEncryptedKey - Creator of the instance code.\n     */\n\n    function InsertInstanceCode(\n        bytes32 _instanceID,\n        bytes32 _codeID,\n        string memory name,\n        string memory about,\n        string memory chatID,\n        string memory codeIPNS,\n        string memory IPNSEncryptedKey\n    ) internal {\n        mutate(\n            tableIDs[2],\n            SQLHelpers.toInsert(\n                DB_INSTANCES_CODES_TABLE_PREFIX,\n                tableIDs[2],\n                \"InstanceID, codeID, name, about, chatID, IPNS, IPNSEncryptedKey, creator\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(_instanceID)),\n                    \",\",\n                    SQLHelpers.quote(bytes32ToString(_codeID)),\n                    \",\",\n                    SQLHelpers.quote(name),\n                    \",\",\n                    SQLHelpers.quote(about),\n                    \",\",\n                    SQLHelpers.quote(chatID),\n                    \",\",\n                    SQLHelpers.quote(codeIPNS),\n                    \",\",\n                    SQLHelpers.quote(IPNSEncryptedKey),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(msg.sender))\n                )\n            )\n        );\n    }\n\n    function updateInstanceMetadata(\n        bytes32 InstanceID,\n        string memory metadataCID\n    ) internal {\n        mutate(\n            tableIDs[1],\n            SQLHelpers.toUpdate(\n                DBSPACES_INSTANCES_TABLE_PREFIX,\n                tableIDs[1],\n                string.concat(\"metadataCID = \", SQLHelpers.quote(metadataCID)),\n                string.concat(\n                    \"InstanceID = \",\n                    SQLHelpers.quote(bytes32ToString(InstanceID))\n                )\n            )\n        );\n    }\n\n    function updateInstanceCode(\n        bytes32 codeID,\n        string memory name,\n        string memory about\n    ) internal {\n        mutate(\n            tableIDs[2],\n            SQLHelpers.toUpdate(\n                DB_INSTANCES_CODES_TABLE_PREFIX,\n                tableIDs[2],\n                string.concat(\n                    \"name = \",\n                    SQLHelpers.quote(name),\n                    \", about = \",\n                    SQLHelpers.quote(about)\n                ),\n                string.concat(\n                    \"codeID = \",\n                    SQLHelpers.quote(bytes32ToString(codeID))\n                )\n            )\n        );\n    }\n\n    /*\n     * @dev Internal function to insert a new subscription.\n     * @param {bytes32} InstanceID - Instance ID.\n     * @param {address} subscriber - Subscriber address.\n     * @param {uint256} tokenID - Subscription token ID.\n     * @param {uint256} endsAt - Subscription end date.\n     */\n    function insertSubscription(\n        bytes32 InstanceID,\n        address subscriber,\n        uint256 endsAt\n    ) internal {\n        mutate(\n            tableIDs[3],\n            SQLHelpers.toInsert(\n                SUBSCRIPTIONS_TABLE_PREFIX,\n                tableIDs[3],\n                \"InstanceID, subscriber, endsAt\",\n                string.concat(\n                    SQLHelpers.quote(bytes32ToString(InstanceID)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toHexString(subscriber)),\n                    \",\",\n                    SQLHelpers.quote(Strings.toString(endsAt))\n                )\n            )\n        );\n    }\n\n    function updateSubscription(\n        bytes32 InstanceID,\n        address subscriber,\n        uint256 endsAt\n    ) internal {\n        mutate(\n            tableIDs[3],\n            SQLHelpers.toUpdate(\n                SUBSCRIPTIONS_TABLE_PREFIX,\n                tableIDs[3],\n                string.concat(\n                    \"endsAt = \",\n                    SQLHelpers.quote(Strings.toString(endsAt))\n                ),\n                string.concat(\n                    \"InstanceID = \",\n                    SQLHelpers.quote(bytes32ToString(InstanceID)),\n                    \" AND subscriber = \",\n                    SQLHelpers.quote(Strings.toHexString(subscriber))\n                )\n            )\n        );\n    }\n\n    /*\n     * @dev Internal function to insert the members.\n     * @param {bytes32} InstanceID - Instance ID.\n     * @param {address[]} members - Members address array.\n     */\n    function _insertMembers(\n        bytes32 InstanceID,\n        address[] memory members\n    ) internal {\n        string memory id = bytes32ToString(InstanceID);\n        for (uint256 i = 0; i < members.length; i++) {\n            mutate(\n                tableIDs[4],\n                SQLHelpers.toInsert(\n                    DB_INSTANCES_MEMBERS_TABLE_PREFIX,\n                    tableIDs[4],\n                    \"InstanceID, member\",\n                    string.concat(\n                        SQLHelpers.quote(id),\n                        \",\",\n                        SQLHelpers.quote(Strings.toHexString(members[i]))\n                    )\n                )\n            );\n        }\n    }\n\n    function _removeMembers(\n        bytes32 InstanceID,\n        address[] memory members\n    ) internal {\n        string memory id = bytes32ToString(InstanceID);\n        for (uint256 i = 0; i < members.length; i++) {\n            mutate(\n                tableIDs[4],\n                SQLHelpers.toDelete(\n                    DB_INSTANCES_MEMBERS_TABLE_PREFIX,\n                    tableIDs[4],\n                    string.concat(\n                        \"InstanceID = \",\n                        SQLHelpers.quote(id),\n                        \" AND member = \",\n                        SQLHelpers.quote(Strings.toHexString(members[i]))\n                    )\n                )\n            );\n        }\n    }\n\n    /*\n     * @dev Internal function to convert bytes32 to string.\n     * @param {bytes32} data - Data to convert.\n     * @return {string} - Converted data.\n     */\n\n    function bytes32ToString(\n        bytes32 data\n    ) internal pure returns (string memory) {\n        // Fixed buffer size for hexadecimal convertion\n        bytes memory converted = new bytes(data.length * 2);\n\n        bytes memory _base = \"0123456789abcdef\";\n\n        for (uint256 i = 0; i < data.length; i++) {\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\n        }\n\n        return string(abi.encodePacked(\"0x\", converted));\n    }\n\n    /*\n     * @dev Internal function to execute a mutation on a table.\n     * @param {uint256} tableId - Table ID.\n     * @param {string} statement - Mutation statement.\n     */\n    function mutate(uint256 tableId, string memory statement) internal {\n        TABLELAND.mutate(address(this), tableId, statement);\n    }\n}\n"
    },
    "contracts/QUADB.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {Core} from \"./libraries/Core.sol\";\n\n/**\n * @title QUADB\n * @dev Create a decentralized Database NameSpaces\n * Where space and subSpaces can get created and anyone can\n * create instances inside a space and contribute to the public\n * this is possible by integrating tableland SQL in solidity\n * FNS system to support a decentralized Namespace of Database spaces\n * IPNS and Push protocol for code and space discussions\n */\ncontract QUADB is Core {\n    constructor(\n        address _registry,\n        address _registrar,\n        address _publicResolver,\n        bytes32 _baseNode,\n        address _gateImplementation,\n        address _subscriptionImplementation\n    )\n        Core(\n            _registry,\n            _registrar,\n            _publicResolver,\n            _baseNode,\n            _gateImplementation,\n            _subscriptionImplementation\n        )\n    {}\n\n    /**\n     * @dev Create a new space under the given node\n     * @param _name The name of the new space\n     */\n    function createDBSpace(string calldata _name) public {\n        bytes32 _newDBSpace = createSubNode(QUADB_NODE, _name);\n\n        isType[_newDBSpace] = Types.SUBNODE;\n\n        spaceInsertion(_newDBSpace, QUADB_NODE, _name);\n    }\n\n    /**\n     * @dev Create a new subnode under the given node\n     * @param _DBSpace The parent node\n     * @param _name The name of the new subnode\n     */\n    function createDBSubSpace(\n        bytes32 _DBSpace,\n        string calldata _name\n    ) external {\n        require(\n            isType[_DBSpace] == Types.SUBNODE,\n            \"QUADB: Node is not a subnode\"\n        );\n\n        bytes32 _newDBSubSpace = createSubNode(_DBSpace, _name);\n\n        isType[_newDBSubSpace] = Types.SUBNODE;\n\n        spaceInsertion(_newDBSubSpace, _DBSpace, _name);\n    }\n\n    /**\n     * @dev Create a new instance under the given node\n     * @param _node The parent node\n     * @param _members The hatID of the new instance\n     * @param _metadataCID The name of the new instance\n     * @param _chatID The chatID of the new instance\n     * @param _IPNS The IPNS of the new instance\n     */\n    function createSpaceInstance(\n        bytes32 _node,\n        uint256 _price,\n        address[] calldata _members,\n        string calldata _metadataCID,\n        string calldata _chatID,\n        string calldata _IPNS,\n        string calldata _IPNSEncryptedKey\n    ) external {\n        require(isType[_node] == Types.SUBNODE, \"QUADB: Node is not a subnode\");\n\n        bytes32 _newDBInstance = keccak256(abi.encodePacked(_node, _IPNS));\n\n        if (isType[_newDBInstance] != Types.NULL) {\n            revert InstanceAlreadyExists();\n        }\n        address _gatedContract;\n        if (_members.length > 0) {\n            _gatedContract = createGatedContract(_members, _newDBInstance);\n            _insertMembers(_newDBInstance, _members);\n        }\n\n        instances[_newDBInstance] = SpaceInstance(\n            _gatedContract,\n            _price,\n            msg.sender\n        );\n\n        createInstanceType(_newDBInstance, _gatedContract, _price);\n\n        instanceInsertion(\n            _newDBInstance,\n            uint8(isType[_newDBInstance]),\n            _node,\n            _gatedContract,\n            _price,\n            _metadataCID,\n            _chatID,\n            _IPNS,\n            _IPNSEncryptedKey\n        );\n    }\n\n    /**\n     * @dev Create a new instance under the given node\n     * @param _instance The parent node\n     * @param _name The name of the new instance\n     * @param _about The about of the new instance\n     * @param _chatID The chatID of the new instance\n     * @param _codeIPNS The IPNS of the new instance\n     */\n    function createInstanceCode(\n        bytes32 _instance,\n        string calldata _name,\n        string calldata _about,\n        string calldata _chatID,\n        string calldata _codeIPNS,\n        string calldata _IPNSEncryptedKey\n    ) external {\n        if (!hasMutateAccess(_instance, msg.sender)) {\n            revert NoInstanceAccess();\n        }\n\n        bytes32 _newDBInstanceCode = keccak256(\n            abi.encodePacked(_instance, _codeIPNS)\n        );\n\n        if (isType[_newDBInstanceCode] != Types.NULL) {\n            revert InstanceAlreadyExists();\n        }\n        codeOwner[_newDBInstanceCode] = msg.sender;\n        isType[_newDBInstanceCode] = Types.CODE;\n\n        InsertInstanceCode(\n            _instance,\n            _newDBInstanceCode,\n            _name,\n            _about,\n            _chatID,\n            _codeIPNS,\n            _IPNSEncryptedKey\n        );\n    }\n\n    function purchaseInstanceSubscription(\n        bytes32 _instanceID\n    ) external payable {\n        purchaseSubscription(_instanceID);\n        insertSubscription(_instanceID, msg.sender, getTime() + MONTH);\n    }\n\n    function extendInstanceSubscription(bytes32 _instanceID) external payable {\n        uint256 remaining = getRemainingSubscriptionTime(\n            _instanceID,\n            msg.sender\n        );\n\n        extendSubscription(_instanceID);\n\n        updateSubscription(_instanceID, msg.sender, remaining + MONTH);\n    }\n\n    function updateCode(\n        bytes32 _codeID,\n        string calldata _name,\n        string calldata _about\n    ) external {\n        if (codeOwner[_codeID] != msg.sender) {\n            revert NoCodeOwner();\n        }\n        updateInstanceCode(_codeID, _name, _about);\n    }\n\n    function updateInstance(\n        bytes32 _instanceID,\n        string calldata _metadataCID\n    ) external {\n        if (instances[_instanceID].creator != msg.sender) {\n            // revert NoInstanceAccess();\n            revert(\"QUADB: No instance access\");\n        }\n        updateInstanceMetadata(_instanceID, _metadataCID);\n    }\n}"
    },
    "erc721a-upgradeable/contracts/IERC721AUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.3.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721AUpgradeable {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    /**\n     * `_sequentialUpTo()` must be greater than `_startTokenId()`.\n     */\n    error SequentialUpToTooSmall();\n\n    /**\n     * The `tokenId` of a sequential mint exceeds `_sequentialUpTo()`.\n     */\n    error SequentialMintExceedsLimit();\n\n    /**\n     * Spot minting requires a `tokenId` greater than `_sequentialUpTo()`.\n     */\n    error SpotMintTokenIdTooSmall();\n\n    /**\n     * Cannot mint over a token that already exists.\n     */\n    error TokenAlreadyExists();\n\n    /**\n     * The feature is not compatible with spot mints.\n     */\n    error NotCompatibleWithSpotMints();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
